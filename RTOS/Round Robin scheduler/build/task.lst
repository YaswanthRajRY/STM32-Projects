ARM GAS  /tmp/cc08YL0y.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"task.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.allocate_task_stack,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	allocate_task_stack:
  26              	.LVL0:
  27              	.LFB137:
  28              		.file 1 "src/task.c"
   1:src/task.c    **** #include "task.h"
   2:src/task.c    **** 
   3:src/task.c    **** task_list* task_head = NULL;                // pointer to point head in linked list
   4:src/task.c    **** task_list* idle_task = NULL;                // pointer to point idle task in linked list
   5:src/task.c    **** 
   6:src/task.c    **** uint32_t task_stack[STACK_SIZE];            // total task stack size
   7:src/task.c    **** uint16_t current_stack_size = STACK_SIZE;   // available task stack size
   8:src/task.c    **** 
   9:src/task.c    **** extern void idleTask(void);                 // defined in scheduler.c
  10:src/task.c    **** 
  11:src/task.c    **** /*********************************** Function to Allocate task stack ******************************
  12:src/task.c    **** static int allocate_task_stack(TCB_Typedef* tcb, void (*fn)(void), char* name)
  13:src/task.c    **** {
  29              		.loc 1 13 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  14:src/task.c    ****     if ((current_stack_size - 128) < 0)                             // check for available space
  34              		.loc 1 14 5 view .LVU1
  35              		.loc 1 14 36 is_stmt 0 view .LVU2
  36 0000 084B     		ldr	r3, .L4
  37 0002 1B88     		ldrh	r3, [r3]
  38              		.loc 1 14 8 view .LVU3
  39 0004 7F2B     		cmp	r3, #127
  40 0006 09D9     		bls	.L3
  15:src/task.c    ****     {
  16:src/task.c    ****         return -1;
  17:src/task.c    ****     }
  18:src/task.c    ****     current_stack_size = current_stack_size - 128;                  // allocate stack space
ARM GAS  /tmp/cc08YL0y.s 			page 2


  41              		.loc 1 18 5 is_stmt 1 view .LVU4
  42              		.loc 1 18 45 is_stmt 0 view .LVU5
  43 0008 803B     		subs	r3, r3, #128
  44 000a 9BB2     		uxth	r3, r3
  45              		.loc 1 18 24 view .LVU6
  46 000c 054A     		ldr	r2, .L4
  47              	.LVL1:
  48              		.loc 1 18 24 view .LVU7
  49 000e 1380     		strh	r3, [r2]	@ movhi
  19:src/task.c    ****     tcb->stack_addr = &task_stack[current_stack_size];              // update task stack top addres
  50              		.loc 1 19 5 is_stmt 1 view .LVU8
  51              		.loc 1 19 23 is_stmt 0 view .LVU9
  52 0010 054A     		ldr	r2, .L4+4
  53 0012 02EB8303 		add	r3, r2, r3, lsl #2
  54              		.loc 1 19 21 view .LVU10
  55 0016 4360     		str	r3, [r0, #4]
  20:src/task.c    **** 
  21:src/task.c    ****     return 0;
  56              		.loc 1 21 5 is_stmt 1 view .LVU11
  57              		.loc 1 21 12 is_stmt 0 view .LVU12
  58 0018 0020     		movs	r0, #0
  59              	.LVL2:
  60              		.loc 1 21 12 view .LVU13
  61 001a 7047     		bx	lr
  62              	.LVL3:
  63              	.L3:
  16:src/task.c    ****     }
  64              		.loc 1 16 16 view .LVU14
  65 001c 4FF0FF30 		mov	r0, #-1
  66              	.LVL4:
  22:src/task.c    **** }
  67              		.loc 1 22 1 view .LVU15
  68 0020 7047     		bx	lr
  69              	.L5:
  70 0022 00BF     		.align	2
  71              	.L4:
  72 0024 00000000 		.word	.LANCHOR0
  73 0028 00000000 		.word	task_stack
  74              		.cfi_endproc
  75              	.LFE137:
  77              		.section	.text.create_context,"ax",%progbits
  78              		.align	1
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu fpv4-sp-d16
  84              	create_context:
  85              	.LVL5:
  86              	.LFB138:
  23:src/task.c    **** 
  24:src/task.c    **** /*********************************** Function to Create dummy context *****************************
  25:src/task.c    **** static void create_context(TCB_Typedef* tcb)
  26:src/task.c    **** {
  87              		.loc 1 26 1 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc08YL0y.s 			page 3


  91              		@ link register save eliminated.
  27:src/task.c    ****     uint8_t i = 0;
  92              		.loc 1 27 5 view .LVU17
  28:src/task.c    **** 
  29:src/task.c    ****     *(uint32_t*)(--tcb->stack_addr) = (uint32_t)0x01000000;         // xPSR
  93              		.loc 1 29 5 view .LVU18
  94              		.loc 1 29 23 is_stmt 0 view .LVU19
  95 0000 4368     		ldr	r3, [r0, #4]
  96              		.loc 1 29 6 view .LVU20
  97 0002 1A1F     		subs	r2, r3, #4
  98              		.loc 1 29 37 view .LVU21
  99 0004 4260     		str	r2, [r0, #4]
 100 0006 4FF08072 		mov	r2, #16777216
 101 000a 43F8042C 		str	r2, [r3, #-4]
  30:src/task.c    ****     *(uint32_t*)(--tcb->stack_addr) = (uint32_t)tcb->fn | 1;        // (pc) fn address with LSB set
 102              		.loc 1 30 5 is_stmt 1 view .LVU22
 103              		.loc 1 30 52 is_stmt 0 view .LVU23
 104 000e 0368     		ldr	r3, [r0]
 105              		.loc 1 30 23 view .LVU24
 106 0010 4268     		ldr	r2, [r0, #4]
 107              		.loc 1 30 6 view .LVU25
 108 0012 111F     		subs	r1, r2, #4
 109              		.loc 1 30 37 view .LVU26
 110 0014 4160     		str	r1, [r0, #4]
 111              		.loc 1 30 57 view .LVU27
 112 0016 43F00103 		orr	r3, r3, #1
 113              		.loc 1 30 37 view .LVU28
 114 001a 42F8043C 		str	r3, [r2, #-4]
  31:src/task.c    ****     *(uint32_t*)(--tcb->stack_addr) = (uint32_t)0xFFFFFFFD;         // LR exception return code for
 115              		.loc 1 31 5 is_stmt 1 view .LVU29
 116              		.loc 1 31 23 is_stmt 0 view .LVU30
 117 001e 4368     		ldr	r3, [r0, #4]
 118              		.loc 1 31 6 view .LVU31
 119 0020 1A1F     		subs	r2, r3, #4
 120              		.loc 1 31 37 view .LVU32
 121 0022 4260     		str	r2, [r0, #4]
 122 0024 6FF00202 		mvn	r2, #2
 123 0028 43F8042C 		str	r2, [r3, #-4]
  32:src/task.c    ****     *(uint32_t*)(--tcb->stack_addr) = (uint32_t)tcb;                // (r12) TCB address
 124              		.loc 1 32 5 is_stmt 1 view .LVU33
 125              		.loc 1 32 23 is_stmt 0 view .LVU34
 126 002c 4368     		ldr	r3, [r0, #4]
 127              		.loc 1 32 6 view .LVU35
 128 002e 1A1F     		subs	r2, r3, #4
 129              		.loc 1 32 37 view .LVU36
 130 0030 4260     		str	r2, [r0, #4]
 131 0032 43F8040C 		str	r0, [r3, #-4]
  33:src/task.c    ****     
  34:src/task.c    ****     *(uint32_t*)(--tcb->stack_addr) = (uint32_t)0xDEADBABE;         // dummy reg value r0
 132              		.loc 1 34 5 is_stmt 1 view .LVU37
 133              		.loc 1 34 23 is_stmt 0 view .LVU38
 134 0036 4268     		ldr	r2, [r0, #4]
 135              		.loc 1 34 6 view .LVU39
 136 0038 131F     		subs	r3, r2, #4
 137              		.loc 1 34 37 view .LVU40
 138 003a 4360     		str	r3, [r0, #4]
 139 003c 0F4B     		ldr	r3, .L9
ARM GAS  /tmp/cc08YL0y.s 			page 4


 140 003e 42F8043C 		str	r3, [r2, #-4]
  35:src/task.c    ****     *(uint32_t*)(--tcb->stack_addr) = (uint32_t)0xDEADBABE;         // dummy reg value r1
 141              		.loc 1 35 5 is_stmt 1 view .LVU41
 142              		.loc 1 35 23 is_stmt 0 view .LVU42
 143 0042 4268     		ldr	r2, [r0, #4]
 144              		.loc 1 35 6 view .LVU43
 145 0044 111F     		subs	r1, r2, #4
 146              		.loc 1 35 37 view .LVU44
 147 0046 4160     		str	r1, [r0, #4]
 148 0048 42F8043C 		str	r3, [r2, #-4]
  36:src/task.c    ****     *(uint32_t*)(--tcb->stack_addr) = (uint32_t)0xDEADBABE;         // dummy reg value r2
 149              		.loc 1 36 5 is_stmt 1 view .LVU45
 150              		.loc 1 36 23 is_stmt 0 view .LVU46
 151 004c 4268     		ldr	r2, [r0, #4]
 152              		.loc 1 36 6 view .LVU47
 153 004e 111F     		subs	r1, r2, #4
 154              		.loc 1 36 37 view .LVU48
 155 0050 4160     		str	r1, [r0, #4]
 156 0052 42F8043C 		str	r3, [r2, #-4]
  37:src/task.c    ****     *(uint32_t*)(--tcb->stack_addr) = (uint32_t)0xDEADBABE;         // dummy reg value r3
 157              		.loc 1 37 5 is_stmt 1 view .LVU49
 158              		.loc 1 37 23 is_stmt 0 view .LVU50
 159 0056 4268     		ldr	r2, [r0, #4]
 160              		.loc 1 37 6 view .LVU51
 161 0058 111F     		subs	r1, r2, #4
 162              		.loc 1 37 37 view .LVU52
 163 005a 4160     		str	r1, [r0, #4]
 164 005c 42F8043C 		str	r3, [r2, #-4]
  38:src/task.c    ****     
  39:src/task.c    ****     for (i=0; i<8; i++)
 165              		.loc 1 39 5 is_stmt 1 view .LVU53
 166              		.loc 1 39 11 is_stmt 0 view .LVU54
 167 0060 0023     		movs	r3, #0
 168              		.loc 1 39 5 view .LVU55
 169 0062 07E0     		b	.L7
 170              	.LVL6:
 171              	.L8:
  40:src/task.c    ****     {
  41:src/task.c    ****         *(uint32_t*)(--tcb->stack_addr) = (uint32_t)0xDEADBABE;    // dummy reg value r4- r11
 172              		.loc 1 41 9 is_stmt 1 discriminator 3 view .LVU56
 173              		.loc 1 41 27 is_stmt 0 discriminator 3 view .LVU57
 174 0064 4268     		ldr	r2, [r0, #4]
 175              		.loc 1 41 10 discriminator 3 view .LVU58
 176 0066 111F     		subs	r1, r2, #4
 177              		.loc 1 41 41 discriminator 3 view .LVU59
 178 0068 4160     		str	r1, [r0, #4]
 179 006a 0449     		ldr	r1, .L9
 180 006c 42F8041C 		str	r1, [r2, #-4]
  39:src/task.c    ****     {
 181              		.loc 1 39 20 is_stmt 1 discriminator 3 view .LVU60
  39:src/task.c    ****     {
 182              		.loc 1 39 21 is_stmt 0 discriminator 3 view .LVU61
 183 0070 0133     		adds	r3, r3, #1
 184              	.LVL7:
  39:src/task.c    ****     {
 185              		.loc 1 39 21 discriminator 3 view .LVU62
 186 0072 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cc08YL0y.s 			page 5


 187              	.LVL8:
 188              	.L7:
  39:src/task.c    ****     {
 189              		.loc 1 39 15 is_stmt 1 discriminator 1 view .LVU63
  39:src/task.c    ****     {
 190              		.loc 1 39 5 is_stmt 0 discriminator 1 view .LVU64
 191 0074 072B     		cmp	r3, #7
 192 0076 F5D9     		bls	.L8
  42:src/task.c    ****     }
  43:src/task.c    **** }
 193              		.loc 1 43 1 view .LVU65
 194 0078 7047     		bx	lr
 195              	.L10:
 196 007a 00BF     		.align	2
 197              	.L9:
 198 007c BEBAADDE 		.word	-559039810
 199              		.cfi_endproc
 200              	.LFE138:
 202              		.section	.text.add_inList,"ax",%progbits
 203              		.align	1
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu fpv4-sp-d16
 209              	add_inList:
 210              	.LVL9:
 211              	.LFB139:
  44:src/task.c    **** 
  45:src/task.c    **** /****************************** Function to Add task in circular linked List **********************
  46:src/task.c    **** static void add_inList(task_list* tcb)
  47:src/task.c    **** {
 212              		.loc 1 47 1 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              		@ link register save eliminated.
  48:src/task.c    ****     if (task_head == NULL)                                          // check head is empty
 217              		.loc 1 48 5 view .LVU67
 218              		.loc 1 48 19 is_stmt 0 view .LVU68
 219 0000 074B     		ldr	r3, .L15
 220 0002 1B68     		ldr	r3, [r3]
 221              		.loc 1 48 8 view .LVU69
 222 0004 2BB1     		cbz	r3, .L14
  49:src/task.c    ****     {
  50:src/task.c    ****         tcb->next = tcb;                                            // link same node
  51:src/task.c    ****         task_head = tcb;                                            // make first node as head
  52:src/task.c    ****         idle_task = task_head;                                      // idle_task is used to track l
  53:src/task.c    ****     }
  54:src/task.c    ****     else
  55:src/task.c    ****     {
  56:src/task.c    ****         idle_task->next = tcb;                                      // add next node after last nod
 223              		.loc 1 56 9 is_stmt 1 view .LVU70
 224              		.loc 1 56 18 is_stmt 0 view .LVU71
 225 0006 074A     		ldr	r2, .L15+4
 226 0008 1168     		ldr	r1, [r2]
 227              		.loc 1 56 25 view .LVU72
 228 000a 4861     		str	r0, [r1, #20]
ARM GAS  /tmp/cc08YL0y.s 			page 6


  57:src/task.c    ****         tcb->next = task_head;                                      // link last node to head
 229              		.loc 1 57 9 is_stmt 1 view .LVU73
 230              		.loc 1 57 19 is_stmt 0 view .LVU74
 231 000c 4361     		str	r3, [r0, #20]
  58:src/task.c    ****         idle_task = tcb;                                            // make new node as last node
 232              		.loc 1 58 9 is_stmt 1 view .LVU75
 233              		.loc 1 58 19 is_stmt 0 view .LVU76
 234 000e 1060     		str	r0, [r2]
  59:src/task.c    ****     }
  60:src/task.c    **** }
 235              		.loc 1 60 1 view .LVU77
 236 0010 7047     		bx	lr
 237              	.L14:
  50:src/task.c    ****         task_head = tcb;                                            // make first node as head
 238              		.loc 1 50 9 is_stmt 1 view .LVU78
  50:src/task.c    ****         task_head = tcb;                                            // make first node as head
 239              		.loc 1 50 19 is_stmt 0 view .LVU79
 240 0012 4061     		str	r0, [r0, #20]
  51:src/task.c    ****         idle_task = task_head;                                      // idle_task is used to track l
 241              		.loc 1 51 9 is_stmt 1 view .LVU80
  51:src/task.c    ****         idle_task = task_head;                                      // idle_task is used to track l
 242              		.loc 1 51 19 is_stmt 0 view .LVU81
 243 0014 024B     		ldr	r3, .L15
 244 0016 1860     		str	r0, [r3]
  52:src/task.c    ****     }
 245              		.loc 1 52 9 is_stmt 1 view .LVU82
  52:src/task.c    ****     }
 246              		.loc 1 52 19 is_stmt 0 view .LVU83
 247 0018 024B     		ldr	r3, .L15+4
 248 001a 1860     		str	r0, [r3]
 249 001c 7047     		bx	lr
 250              	.L16:
 251 001e 00BF     		.align	2
 252              	.L15:
 253 0020 00000000 		.word	.LANCHOR1
 254 0024 00000000 		.word	.LANCHOR2
 255              		.cfi_endproc
 256              	.LFE139:
 258              		.section	.rodata.createTask.str1.4,"aMS",%progbits,1
 259              		.align	2
 260              	.LC0:
 261 0000 2D204661 		.ascii	"- Failed to create memory for task\000"
 261      696C6564 
 261      20746F20 
 261      63726561 
 261      7465206D 
 262 0023 00       		.align	2
 263              	.LC1:
 264 0024 2D205374 		.ascii	"- Stack full\000"
 264      61636B20 
 264      66756C6C 
 264      00
 265              		.section	.text.createTask,"ax",%progbits
 266              		.align	1
 267              		.global	createTask
 268              		.syntax unified
 269              		.thumb
ARM GAS  /tmp/cc08YL0y.s 			page 7


 270              		.thumb_func
 271              		.fpu fpv4-sp-d16
 273              	createTask:
 274              	.LVL10:
 275              	.LFB140:
  61:src/task.c    **** 
  62:src/task.c    **** /*************************************** Function to create task **********************************
  63:src/task.c    **** void createTask(void (*fn)(void), char* name)
  64:src/task.c    **** {
 276              		.loc 1 64 1 is_stmt 1 view -0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              		.loc 1 64 1 is_stmt 0 view .LVU85
 281 0000 70B5     		push	{r4, r5, r6, lr}
 282              	.LCFI0:
 283              		.cfi_def_cfa_offset 16
 284              		.cfi_offset 4, -16
 285              		.cfi_offset 5, -12
 286              		.cfi_offset 6, -8
 287              		.cfi_offset 14, -4
 288 0002 0646     		mov	r6, r0
 289 0004 0D46     		mov	r5, r1
  65:src/task.c    ****     task_list* newTask = (task_list*)malloc(sizeof(task_list));     // allocate memory
 290              		.loc 1 65 5 is_stmt 1 view .LVU86
 291              		.loc 1 65 38 is_stmt 0 view .LVU87
 292 0006 1820     		movs	r0, #24
 293              	.LVL11:
 294              		.loc 1 65 38 view .LVU88
 295 0008 FFF7FEFF 		bl	malloc
 296              	.LVL12:
  66:src/task.c    **** 
  67:src/task.c    ****     if (newTask == NULL)
 297              		.loc 1 67 5 is_stmt 1 view .LVU89
 298              		.loc 1 67 8 is_stmt 0 view .LVU90
 299 000c 0446     		mov	r4, r0
 300 000e C8B1     		cbz	r0, .L21
 301              	.LVL13:
 302              	.L18:
  68:src/task.c    ****     {
  69:src/task.c    ****         Log_s("- Failed to create memory for task");
  70:src/task.c    ****     }
  71:src/task.c    ****     newTask->next = NULL;
 303              		.loc 1 71 5 is_stmt 1 view .LVU91
 304              		.loc 1 71 19 is_stmt 0 view .LVU92
 305 0010 0023     		movs	r3, #0
 306 0012 6361     		str	r3, [r4, #20]
  72:src/task.c    **** 
  73:src/task.c    ****     memset(newTask, 0, sizeof(*newTask));                           // set 0 as initial value
 307              		.loc 1 73 5 is_stmt 1 view .LVU93
 308 0014 2360     		str	r3, [r4]	@ unaligned
 309 0016 6360     		str	r3, [r4, #4]	@ unaligned
 310 0018 A360     		str	r3, [r4, #8]	@ unaligned
 311 001a E360     		str	r3, [r4, #12]	@ unaligned
 312 001c 2361     		str	r3, [r4, #16]	@ unaligned
 313 001e 6361     		str	r3, [r4, #20]	@ unaligned
  74:src/task.c    **** 
ARM GAS  /tmp/cc08YL0y.s 			page 8


  75:src/task.c    ****     if (allocate_task_stack(&newTask->tcb, fn, name) < 0)           // allocate stack for task
 314              		.loc 1 75 5 view .LVU94
 315              		.loc 1 75 9 is_stmt 0 view .LVU95
 316 0020 2A46     		mov	r2, r5
 317 0022 3146     		mov	r1, r6
 318 0024 2046     		mov	r0, r4
 319 0026 FFF7FEFF 		bl	allocate_task_stack
 320              	.LVL14:
 321              		.loc 1 75 8 view .LVU96
 322 002a 0028     		cmp	r0, #0
 323 002c 0EDB     		blt	.L22
 324              	.L19:
  76:src/task.c    ****     {
  77:src/task.c    ****         Log_s("- Stack full");
  78:src/task.c    ****     }
  79:src/task.c    **** 
  80:src/task.c    ****     newTask->tcb.fn = fn;                                           // add function address in tcb
 325              		.loc 1 80 5 is_stmt 1 view .LVU97
 326              		.loc 1 80 21 is_stmt 0 view .LVU98
 327 002e 2660     		str	r6, [r4]
  81:src/task.c    ****     newTask->tcb.taskName = name;                                   // add name in tcb
 328              		.loc 1 81 5 is_stmt 1 view .LVU99
 329              		.loc 1 81 27 is_stmt 0 view .LVU100
 330 0030 A560     		str	r5, [r4, #8]
  82:src/task.c    ****     newTask->tcb.task_state = READY;                                // set task state
 331              		.loc 1 82 5 is_stmt 1 view .LVU101
 332              		.loc 1 82 29 is_stmt 0 view .LVU102
 333 0032 0023     		movs	r3, #0
 334 0034 2382     		strh	r3, [r4, #16]	@ movhi
  83:src/task.c    **** 
  84:src/task.c    ****     create_context(&newTask->tcb);                                  // create dummy context
 335              		.loc 1 84 5 is_stmt 1 view .LVU103
 336 0036 2046     		mov	r0, r4
 337 0038 FFF7FEFF 		bl	create_context
 338              	.LVL15:
  85:src/task.c    **** 
  86:src/task.c    ****     add_inList(newTask);                                            // add created task in linked l
 339              		.loc 1 86 5 view .LVU104
 340 003c 2046     		mov	r0, r4
 341 003e FFF7FEFF 		bl	add_inList
 342              	.LVL16:
  87:src/task.c    **** }
 343              		.loc 1 87 1 is_stmt 0 view .LVU105
 344 0042 70BD     		pop	{r4, r5, r6, pc}
 345              	.LVL17:
 346              	.L21:
  69:src/task.c    ****     }
 347              		.loc 1 69 9 is_stmt 1 view .LVU106
 348 0044 0348     		ldr	r0, .L23
 349              	.LVL18:
  69:src/task.c    ****     }
 350              		.loc 1 69 9 is_stmt 0 view .LVU107
 351 0046 FFF7FEFF 		bl	Log_s
 352              	.LVL19:
 353 004a E1E7     		b	.L18
 354              	.L22:
  77:src/task.c    ****     }
ARM GAS  /tmp/cc08YL0y.s 			page 9


 355              		.loc 1 77 9 is_stmt 1 view .LVU108
 356 004c 0248     		ldr	r0, .L23+4
 357 004e FFF7FEFF 		bl	Log_s
 358              	.LVL20:
 359 0052 ECE7     		b	.L19
 360              	.L24:
 361              		.align	2
 362              	.L23:
 363 0054 00000000 		.word	.LC0
 364 0058 24000000 		.word	.LC1
 365              		.cfi_endproc
 366              	.LFE140:
 368              		.section	.rodata.create_idle_task.str1.4,"aMS",%progbits,1
 369              		.align	2
 370              	.LC2:
 371 0000 49646C65 		.ascii	"Idle Task\000"
 371      20546173 
 371      6B00
 372              		.section	.text.create_idle_task,"ax",%progbits
 373              		.align	1
 374              		.global	create_idle_task
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 378              		.fpu fpv4-sp-d16
 380              	create_idle_task:
 381              	.LFB141:
  88:src/task.c    **** 
  89:src/task.c    **** void create_idle_task()
  90:src/task.c    **** {
 382              		.loc 1 90 1 view -0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 0
 385              		@ frame_needed = 0, uses_anonymous_args = 0
 386 0000 08B5     		push	{r3, lr}
 387              	.LCFI1:
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 3, -8
 390              		.cfi_offset 14, -4
  91:src/task.c    ****     createTask(idleTask, "Idle Task");
 391              		.loc 1 91 5 view .LVU110
 392 0002 0249     		ldr	r1, .L27
 393 0004 0248     		ldr	r0, .L27+4
 394 0006 FFF7FEFF 		bl	createTask
 395              	.LVL21:
  92:src/task.c    **** }...
 396              		.loc 1 92 1 is_stmt 0 view .LVU111
 397 000a 08BD     		pop	{r3, pc}
 398              	.L28:
 399              		.align	2
 400              	.L27:
 401 000c 00000000 		.word	.LC2
 402 0010 00000000 		.word	idleTask
 403              		.cfi_endproc
 404              	.LFE141:
 406              		.global	current_stack_size
 407              		.global	task_stack
ARM GAS  /tmp/cc08YL0y.s 			page 10


 408              		.global	idle_task
 409              		.global	task_head
 410              		.section	.bss.idle_task,"aw",%nobits
 411              		.align	2
 412              		.set	.LANCHOR2,. + 0
 415              	idle_task:
 416 0000 00000000 		.space	4
 417              		.section	.bss.task_head,"aw",%nobits
 418              		.align	2
 419              		.set	.LANCHOR1,. + 0
 422              	task_head:
 423 0000 00000000 		.space	4
 424              		.section	.bss.task_stack,"aw",%nobits
 425              		.align	2
 428              	task_stack:
 429 0000 00000000 		.space	4096
 429      00000000 
 429      00000000 
 429      00000000 
 429      00000000 
 430              		.section	.data.current_stack_size,"aw"
 431              		.align	1
 432              		.set	.LANCHOR0,. + 0
 435              	current_stack_size:
 436 0000 0004     		.short	1024
 437              		.text
 438              	.Letext0:
 439              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 440              		.file 3 "inc/task.h"
 441              		.file 4 "/usr/include/newlib/stdlib.h"
 442              		.file 5 "inc/Log.h"
ARM GAS  /tmp/cc08YL0y.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 task.c
     /tmp/cc08YL0y.s:18     .text.allocate_task_stack:0000000000000000 $t
     /tmp/cc08YL0y.s:25     .text.allocate_task_stack:0000000000000000 allocate_task_stack
     /tmp/cc08YL0y.s:72     .text.allocate_task_stack:0000000000000024 $d
     /tmp/cc08YL0y.s:428    .bss.task_stack:0000000000000000 task_stack
     /tmp/cc08YL0y.s:78     .text.create_context:0000000000000000 $t
     /tmp/cc08YL0y.s:84     .text.create_context:0000000000000000 create_context
     /tmp/cc08YL0y.s:198    .text.create_context:000000000000007c $d
     /tmp/cc08YL0y.s:203    .text.add_inList:0000000000000000 $t
     /tmp/cc08YL0y.s:209    .text.add_inList:0000000000000000 add_inList
     /tmp/cc08YL0y.s:253    .text.add_inList:0000000000000020 $d
     /tmp/cc08YL0y.s:259    .rodata.createTask.str1.4:0000000000000000 $d
     /tmp/cc08YL0y.s:266    .text.createTask:0000000000000000 $t
     /tmp/cc08YL0y.s:273    .text.createTask:0000000000000000 createTask
     /tmp/cc08YL0y.s:363    .text.createTask:0000000000000054 $d
     /tmp/cc08YL0y.s:369    .rodata.create_idle_task.str1.4:0000000000000000 $d
     /tmp/cc08YL0y.s:373    .text.create_idle_task:0000000000000000 $t
     /tmp/cc08YL0y.s:380    .text.create_idle_task:0000000000000000 create_idle_task
     /tmp/cc08YL0y.s:401    .text.create_idle_task:000000000000000c $d
     /tmp/cc08YL0y.s:435    .data.current_stack_size:0000000000000000 current_stack_size
     /tmp/cc08YL0y.s:415    .bss.idle_task:0000000000000000 idle_task
     /tmp/cc08YL0y.s:422    .bss.task_head:0000000000000000 task_head
     /tmp/cc08YL0y.s:411    .bss.idle_task:0000000000000000 $d
     /tmp/cc08YL0y.s:418    .bss.task_head:0000000000000000 $d
     /tmp/cc08YL0y.s:425    .bss.task_stack:0000000000000000 $d
     /tmp/cc08YL0y.s:431    .data.current_stack_size:0000000000000000 $d

UNDEFINED SYMBOLS
malloc
Log_s
idleTask
