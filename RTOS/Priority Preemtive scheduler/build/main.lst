ARM GAS  /tmp/ccwOuJcR.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.task_1.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC0:
  20 0000 52756E6E 		.ascii	"Running Task 1\000"
  20      696E6720 
  20      5461736B 
  20      203100
  21              		.section	.text.task_1,"ax",%progbits
  22              		.align	1
  23              		.global	task_1
  24              		.arch armv7e-m
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.fpu fpv4-sp-d16
  30              	task_1:
  31              	.LFB138:
  32              		.file 1 "src/main.c"
   1:src/main.c    **** #include "main.h"
   2:src/main.c    **** 
   3:src/main.c    **** extern task_list* task_pointer;
   4:src/main.c    **** 
   5:src/main.c    **** void task_1(void);                      // task function prototype
   6:src/main.c    **** void task_2(void);
   7:src/main.c    **** void task_3(void);
   8:src/main.c    **** void Blink_task(void);
   9:src/main.c    **** 
  10:src/main.c    **** int main()
  11:src/main.c    **** {
  12:src/main.c    ****     SystemInit();                       // Initialize system
  13:src/main.c    **** 
  14:src/main.c    ****     Log_s("Priority Preemptive scheduler Program.\n");
  15:src/main.c    **** 
  16:src/main.c    ****     Log_s("Creating tasks...");
  17:src/main.c    ****     createTask(task_1, "Task 1", 3);    // create task
  18:src/main.c    ****     createTask(task_2, "Task 2", 2);
  19:src/main.c    ****     createTask(task_3, "Task 3", 1);
  20:src/main.c    ****     createTask(Blink_task, "Blink Task", 0);
  21:src/main.c    ****     Log_s("Tasks created sucessfully.\n");
  22:src/main.c    **** 
  23:src/main.c    ****     Log_s("Starting scheduler...");
ARM GAS  /tmp/ccwOuJcR.s 			page 2


  24:src/main.c    ****     start_scheduler();                  // Start scheduling the tasks
  25:src/main.c    **** 
  26:src/main.c    ****     while (1)
  27:src/main.c    ****     {
  28:src/main.c    **** 
  29:src/main.c    ****     }
  30:src/main.c    **** }
  31:src/main.c    **** 
  32:src/main.c    **** void task_1(void)                       // this function toggles Port B pin 5
  33:src/main.c    **** {
  33              		.loc 1 33 1 view -0
  34              		.cfi_startproc
  35              		@ Volatile: function does not return.
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
  38 0000 08B5     		push	{r3, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 3, -8
  42              		.cfi_offset 14, -4
  43              	.L2:
  34:src/main.c    ****     while (1)
  44              		.loc 1 34 5 discriminator 1 view .LVU1
  35:src/main.c    ****     {
  36:src/main.c    ****         __disable_irq();
  45              		.loc 1 36 9 discriminator 1 view .LVU2
  46              	.LBB14:
  47              	.LBI14:
  48              		.file 2 "driver/Core/cmsis_gcc.h"
   1:driver/Core/cmsis_gcc.h **** /**************************************************************************//**
   2:driver/Core/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:driver/Core/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:driver/Core/cmsis_gcc.h ****  * @version  V5.4.1
   5:driver/Core/cmsis_gcc.h ****  * @date     27. May 2021
   6:driver/Core/cmsis_gcc.h ****  ******************************************************************************/
   7:driver/Core/cmsis_gcc.h **** /*
   8:driver/Core/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:driver/Core/cmsis_gcc.h ****  *
  10:driver/Core/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:driver/Core/cmsis_gcc.h ****  *
  12:driver/Core/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:driver/Core/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:driver/Core/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:driver/Core/cmsis_gcc.h ****  *
  16:driver/Core/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:driver/Core/cmsis_gcc.h ****  *
  18:driver/Core/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:driver/Core/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:driver/Core/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:driver/Core/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:driver/Core/cmsis_gcc.h ****  * limitations under the License.
  23:driver/Core/cmsis_gcc.h ****  */
  24:driver/Core/cmsis_gcc.h **** 
  25:driver/Core/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:driver/Core/cmsis_gcc.h **** 
  28:driver/Core/cmsis_gcc.h **** /* ignore some GCC warnings */
ARM GAS  /tmp/ccwOuJcR.s 			page 3


  29:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:driver/Core/cmsis_gcc.h **** 
  34:driver/Core/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:driver/Core/cmsis_gcc.h **** #ifndef __has_builtin
  36:driver/Core/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:driver/Core/cmsis_gcc.h **** #endif
  38:driver/Core/cmsis_gcc.h **** 
  39:driver/Core/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:driver/Core/cmsis_gcc.h **** #ifndef   __ASM
  41:driver/Core/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:driver/Core/cmsis_gcc.h **** #endif
  43:driver/Core/cmsis_gcc.h **** #ifndef   __INLINE
  44:driver/Core/cmsis_gcc.h ****   #define __INLINE                               inline
  45:driver/Core/cmsis_gcc.h **** #endif
  46:driver/Core/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:driver/Core/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:driver/Core/cmsis_gcc.h **** #endif
  49:driver/Core/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:driver/Core/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:driver/Core/cmsis_gcc.h **** #endif
  52:driver/Core/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:driver/Core/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:driver/Core/cmsis_gcc.h **** #endif
  55:driver/Core/cmsis_gcc.h **** #ifndef   __USED
  56:driver/Core/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:driver/Core/cmsis_gcc.h **** #endif
  58:driver/Core/cmsis_gcc.h **** #ifndef   __WEAK
  59:driver/Core/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:driver/Core/cmsis_gcc.h **** #endif
  61:driver/Core/cmsis_gcc.h **** #ifndef   __PACKED
  62:driver/Core/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:driver/Core/cmsis_gcc.h **** #endif
  64:driver/Core/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:driver/Core/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:driver/Core/cmsis_gcc.h **** #endif
  67:driver/Core/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:driver/Core/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:driver/Core/cmsis_gcc.h **** #endif
  70:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:driver/Core/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:driver/Core/cmsis_gcc.h **** #endif
  78:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:driver/Core/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccwOuJcR.s 			page 4


  86:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:driver/Core/cmsis_gcc.h **** #endif
  94:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:driver/Core/cmsis_gcc.h **** #endif
 102:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:driver/Core/cmsis_gcc.h **** #endif
 110:driver/Core/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:driver/Core/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:driver/Core/cmsis_gcc.h **** #endif
 113:driver/Core/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:driver/Core/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:driver/Core/cmsis_gcc.h **** #endif
 116:driver/Core/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:driver/Core/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:driver/Core/cmsis_gcc.h **** #endif
 119:driver/Core/cmsis_gcc.h **** 
 120:driver/Core/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:driver/Core/cmsis_gcc.h **** 
 122:driver/Core/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:driver/Core/cmsis_gcc.h **** 
 124:driver/Core/cmsis_gcc.h **** /**
 125:driver/Core/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:driver/Core/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:driver/Core/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:driver/Core/cmsis_gcc.h ****            in the used linker script.
 129:driver/Core/cmsis_gcc.h **** 
 130:driver/Core/cmsis_gcc.h ****  */
 131:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:driver/Core/cmsis_gcc.h **** {
 133:driver/Core/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:driver/Core/cmsis_gcc.h **** 
 135:driver/Core/cmsis_gcc.h ****   typedef struct {
 136:driver/Core/cmsis_gcc.h ****     uint32_t const* src;
 137:driver/Core/cmsis_gcc.h ****     uint32_t* dest;
 138:driver/Core/cmsis_gcc.h ****     uint32_t  wlen;
 139:driver/Core/cmsis_gcc.h ****   } __copy_table_t;
 140:driver/Core/cmsis_gcc.h **** 
 141:driver/Core/cmsis_gcc.h ****   typedef struct {
 142:driver/Core/cmsis_gcc.h ****     uint32_t* dest;
ARM GAS  /tmp/ccwOuJcR.s 			page 5


 143:driver/Core/cmsis_gcc.h ****     uint32_t  wlen;
 144:driver/Core/cmsis_gcc.h ****   } __zero_table_t;
 145:driver/Core/cmsis_gcc.h **** 
 146:driver/Core/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:driver/Core/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:driver/Core/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:driver/Core/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:driver/Core/cmsis_gcc.h **** 
 151:driver/Core/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:driver/Core/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:driver/Core/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:driver/Core/cmsis_gcc.h ****     }
 155:driver/Core/cmsis_gcc.h ****   }
 156:driver/Core/cmsis_gcc.h **** 
 157:driver/Core/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:driver/Core/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:driver/Core/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:driver/Core/cmsis_gcc.h ****     }
 161:driver/Core/cmsis_gcc.h ****   }
 162:driver/Core/cmsis_gcc.h **** 
 163:driver/Core/cmsis_gcc.h ****   _start();
 164:driver/Core/cmsis_gcc.h **** }
 165:driver/Core/cmsis_gcc.h **** 
 166:driver/Core/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:driver/Core/cmsis_gcc.h **** #endif
 168:driver/Core/cmsis_gcc.h **** 
 169:driver/Core/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:driver/Core/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:driver/Core/cmsis_gcc.h **** #endif
 172:driver/Core/cmsis_gcc.h **** 
 173:driver/Core/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:driver/Core/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:driver/Core/cmsis_gcc.h **** #endif
 176:driver/Core/cmsis_gcc.h **** 
 177:driver/Core/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:driver/Core/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:driver/Core/cmsis_gcc.h **** #endif
 180:driver/Core/cmsis_gcc.h **** 
 181:driver/Core/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:driver/Core/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:driver/Core/cmsis_gcc.h **** #endif
 184:driver/Core/cmsis_gcc.h **** 
 185:driver/Core/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:driver/Core/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:driver/Core/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:driver/Core/cmsis_gcc.h **** #endif
 189:driver/Core/cmsis_gcc.h **** 
 190:driver/Core/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:driver/Core/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:driver/Core/cmsis_gcc.h **** #endif
 193:driver/Core/cmsis_gcc.h **** 
 194:driver/Core/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:driver/Core/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:driver/Core/cmsis_gcc.h **** #endif
 197:driver/Core/cmsis_gcc.h **** 
 198:driver/Core/cmsis_gcc.h **** 
 199:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
ARM GAS  /tmp/ccwOuJcR.s 			page 6


 200:driver/Core/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:driver/Core/cmsis_gcc.h **** }
 202:driver/Core/cmsis_gcc.h **** #endif
 203:driver/Core/cmsis_gcc.h **** 
 204:driver/Core/cmsis_gcc.h **** 
 205:driver/Core/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:driver/Core/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:driver/Core/cmsis_gcc.h ****   Access to dedicated instructions
 208:driver/Core/cmsis_gcc.h ****   @{
 209:driver/Core/cmsis_gcc.h **** */
 210:driver/Core/cmsis_gcc.h **** 
 211:driver/Core/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:driver/Core/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:driver/Core/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:driver/Core/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:driver/Core/cmsis_gcc.h **** #else
 219:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:driver/Core/cmsis_gcc.h **** #endif
 223:driver/Core/cmsis_gcc.h **** 
 224:driver/Core/cmsis_gcc.h **** /**
 225:driver/Core/cmsis_gcc.h ****   \brief   No Operation
 226:driver/Core/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:driver/Core/cmsis_gcc.h ****  */
 228:driver/Core/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:driver/Core/cmsis_gcc.h **** 
 230:driver/Core/cmsis_gcc.h **** /**
 231:driver/Core/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:driver/Core/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:driver/Core/cmsis_gcc.h ****  */
 234:driver/Core/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:driver/Core/cmsis_gcc.h **** 
 236:driver/Core/cmsis_gcc.h **** 
 237:driver/Core/cmsis_gcc.h **** /**
 238:driver/Core/cmsis_gcc.h ****   \brief   Wait For Event
 239:driver/Core/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:driver/Core/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:driver/Core/cmsis_gcc.h ****  */
 242:driver/Core/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:driver/Core/cmsis_gcc.h **** 
 244:driver/Core/cmsis_gcc.h **** 
 245:driver/Core/cmsis_gcc.h **** /**
 246:driver/Core/cmsis_gcc.h ****   \brief   Send Event
 247:driver/Core/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:driver/Core/cmsis_gcc.h ****  */
 249:driver/Core/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:driver/Core/cmsis_gcc.h **** 
 251:driver/Core/cmsis_gcc.h **** 
 252:driver/Core/cmsis_gcc.h **** /**
 253:driver/Core/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:driver/Core/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:driver/Core/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:driver/Core/cmsis_gcc.h ****            after the instruction has been completed.
ARM GAS  /tmp/ccwOuJcR.s 			page 7


 257:driver/Core/cmsis_gcc.h ****  */
 258:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:driver/Core/cmsis_gcc.h **** {
 260:driver/Core/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:driver/Core/cmsis_gcc.h **** }
 262:driver/Core/cmsis_gcc.h **** 
 263:driver/Core/cmsis_gcc.h **** 
 264:driver/Core/cmsis_gcc.h **** /**
 265:driver/Core/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:driver/Core/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:driver/Core/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:driver/Core/cmsis_gcc.h ****  */
 269:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:driver/Core/cmsis_gcc.h **** {
 271:driver/Core/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:driver/Core/cmsis_gcc.h **** }
 273:driver/Core/cmsis_gcc.h **** 
 274:driver/Core/cmsis_gcc.h **** 
 275:driver/Core/cmsis_gcc.h **** /**
 276:driver/Core/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:driver/Core/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:driver/Core/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:driver/Core/cmsis_gcc.h ****  */
 280:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:driver/Core/cmsis_gcc.h **** {
 282:driver/Core/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:driver/Core/cmsis_gcc.h **** }
 284:driver/Core/cmsis_gcc.h **** 
 285:driver/Core/cmsis_gcc.h **** 
 286:driver/Core/cmsis_gcc.h **** /**
 287:driver/Core/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:driver/Core/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 291:driver/Core/cmsis_gcc.h ****  */
 292:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:driver/Core/cmsis_gcc.h **** {
 294:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:driver/Core/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:driver/Core/cmsis_gcc.h **** #else
 297:driver/Core/cmsis_gcc.h ****   uint32_t result;
 298:driver/Core/cmsis_gcc.h **** 
 299:driver/Core/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:driver/Core/cmsis_gcc.h ****   return result;
 301:driver/Core/cmsis_gcc.h **** #endif
 302:driver/Core/cmsis_gcc.h **** }
 303:driver/Core/cmsis_gcc.h **** 
 304:driver/Core/cmsis_gcc.h **** 
 305:driver/Core/cmsis_gcc.h **** /**
 306:driver/Core/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:driver/Core/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 310:driver/Core/cmsis_gcc.h ****  */
 311:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:driver/Core/cmsis_gcc.h **** {
 313:driver/Core/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccwOuJcR.s 			page 8


 314:driver/Core/cmsis_gcc.h **** 
 315:driver/Core/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:driver/Core/cmsis_gcc.h ****   return result;
 317:driver/Core/cmsis_gcc.h **** }
 318:driver/Core/cmsis_gcc.h **** 
 319:driver/Core/cmsis_gcc.h **** 
 320:driver/Core/cmsis_gcc.h **** /**
 321:driver/Core/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:driver/Core/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 325:driver/Core/cmsis_gcc.h ****  */
 326:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:driver/Core/cmsis_gcc.h **** {
 328:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:driver/Core/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:driver/Core/cmsis_gcc.h **** #else
 331:driver/Core/cmsis_gcc.h ****   int16_t result;
 332:driver/Core/cmsis_gcc.h **** 
 333:driver/Core/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:driver/Core/cmsis_gcc.h ****   return result;
 335:driver/Core/cmsis_gcc.h **** #endif
 336:driver/Core/cmsis_gcc.h **** }
 337:driver/Core/cmsis_gcc.h **** 
 338:driver/Core/cmsis_gcc.h **** 
 339:driver/Core/cmsis_gcc.h **** /**
 340:driver/Core/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:driver/Core/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:driver/Core/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:driver/Core/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:driver/Core/cmsis_gcc.h ****   \return               Rotated value
 345:driver/Core/cmsis_gcc.h ****  */
 346:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:driver/Core/cmsis_gcc.h **** {
 348:driver/Core/cmsis_gcc.h ****   op2 %= 32U;
 349:driver/Core/cmsis_gcc.h ****   if (op2 == 0U)
 350:driver/Core/cmsis_gcc.h ****   {
 351:driver/Core/cmsis_gcc.h ****     return op1;
 352:driver/Core/cmsis_gcc.h ****   }
 353:driver/Core/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:driver/Core/cmsis_gcc.h **** }
 355:driver/Core/cmsis_gcc.h **** 
 356:driver/Core/cmsis_gcc.h **** 
 357:driver/Core/cmsis_gcc.h **** /**
 358:driver/Core/cmsis_gcc.h ****   \brief   Breakpoint
 359:driver/Core/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:driver/Core/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:driver/Core/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:driver/Core/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:driver/Core/cmsis_gcc.h ****  */
 364:driver/Core/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:driver/Core/cmsis_gcc.h **** 
 366:driver/Core/cmsis_gcc.h **** 
 367:driver/Core/cmsis_gcc.h **** /**
 368:driver/Core/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:driver/Core/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  /tmp/ccwOuJcR.s 			page 9


 371:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 372:driver/Core/cmsis_gcc.h ****  */
 373:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:driver/Core/cmsis_gcc.h **** {
 375:driver/Core/cmsis_gcc.h ****   uint32_t result;
 376:driver/Core/cmsis_gcc.h **** 
 377:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:driver/Core/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:driver/Core/cmsis_gcc.h **** #else
 382:driver/Core/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:driver/Core/cmsis_gcc.h **** 
 384:driver/Core/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:driver/Core/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:driver/Core/cmsis_gcc.h ****   {
 387:driver/Core/cmsis_gcc.h ****     result <<= 1U;
 388:driver/Core/cmsis_gcc.h ****     result |= value & 1U;
 389:driver/Core/cmsis_gcc.h ****     s--;
 390:driver/Core/cmsis_gcc.h ****   }
 391:driver/Core/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:driver/Core/cmsis_gcc.h **** #endif
 393:driver/Core/cmsis_gcc.h ****   return result;
 394:driver/Core/cmsis_gcc.h **** }
 395:driver/Core/cmsis_gcc.h **** 
 396:driver/Core/cmsis_gcc.h **** 
 397:driver/Core/cmsis_gcc.h **** /**
 398:driver/Core/cmsis_gcc.h ****   \brief   Count leading zeros
 399:driver/Core/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:driver/Core/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:driver/Core/cmsis_gcc.h ****  */
 403:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:driver/Core/cmsis_gcc.h **** {
 405:driver/Core/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:driver/Core/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:driver/Core/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:driver/Core/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:driver/Core/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:driver/Core/cmsis_gcc.h ****      is non-zero".
 411:driver/Core/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:driver/Core/cmsis_gcc.h ****      single CLZ instruction.
 413:driver/Core/cmsis_gcc.h ****    */
 414:driver/Core/cmsis_gcc.h ****   if (value == 0U)
 415:driver/Core/cmsis_gcc.h ****   {
 416:driver/Core/cmsis_gcc.h ****     return 32U;
 417:driver/Core/cmsis_gcc.h ****   }
 418:driver/Core/cmsis_gcc.h ****   return __builtin_clz(value);
 419:driver/Core/cmsis_gcc.h **** }
 420:driver/Core/cmsis_gcc.h **** 
 421:driver/Core/cmsis_gcc.h **** 
 422:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:driver/Core/cmsis_gcc.h **** /**
 427:driver/Core/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
ARM GAS  /tmp/ccwOuJcR.s 			page 10


 428:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:driver/Core/cmsis_gcc.h ****  */
 432:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:driver/Core/cmsis_gcc.h **** {
 434:driver/Core/cmsis_gcc.h ****     uint32_t result;
 435:driver/Core/cmsis_gcc.h **** 
 436:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:driver/Core/cmsis_gcc.h **** #else
 439:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:driver/Core/cmsis_gcc.h ****     */
 442:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:driver/Core/cmsis_gcc.h **** #endif
 444:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:driver/Core/cmsis_gcc.h **** }
 446:driver/Core/cmsis_gcc.h **** 
 447:driver/Core/cmsis_gcc.h **** 
 448:driver/Core/cmsis_gcc.h **** /**
 449:driver/Core/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:driver/Core/cmsis_gcc.h ****  */
 454:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:driver/Core/cmsis_gcc.h **** {
 456:driver/Core/cmsis_gcc.h ****     uint32_t result;
 457:driver/Core/cmsis_gcc.h **** 
 458:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:driver/Core/cmsis_gcc.h **** #else
 461:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:driver/Core/cmsis_gcc.h ****     */
 464:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:driver/Core/cmsis_gcc.h **** #endif
 466:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:driver/Core/cmsis_gcc.h **** }
 468:driver/Core/cmsis_gcc.h **** 
 469:driver/Core/cmsis_gcc.h **** 
 470:driver/Core/cmsis_gcc.h **** /**
 471:driver/Core/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:driver/Core/cmsis_gcc.h ****  */
 476:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:driver/Core/cmsis_gcc.h **** {
 478:driver/Core/cmsis_gcc.h ****     uint32_t result;
 479:driver/Core/cmsis_gcc.h **** 
 480:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:driver/Core/cmsis_gcc.h ****    return(result);
 482:driver/Core/cmsis_gcc.h **** }
 483:driver/Core/cmsis_gcc.h **** 
 484:driver/Core/cmsis_gcc.h **** 
ARM GAS  /tmp/ccwOuJcR.s 			page 11


 485:driver/Core/cmsis_gcc.h **** /**
 486:driver/Core/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 491:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 492:driver/Core/cmsis_gcc.h ****  */
 493:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:driver/Core/cmsis_gcc.h **** {
 495:driver/Core/cmsis_gcc.h ****    uint32_t result;
 496:driver/Core/cmsis_gcc.h **** 
 497:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:driver/Core/cmsis_gcc.h ****    return(result);
 499:driver/Core/cmsis_gcc.h **** }
 500:driver/Core/cmsis_gcc.h **** 
 501:driver/Core/cmsis_gcc.h **** 
 502:driver/Core/cmsis_gcc.h **** /**
 503:driver/Core/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 508:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 509:driver/Core/cmsis_gcc.h ****  */
 510:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:driver/Core/cmsis_gcc.h **** {
 512:driver/Core/cmsis_gcc.h ****    uint32_t result;
 513:driver/Core/cmsis_gcc.h **** 
 514:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:driver/Core/cmsis_gcc.h ****    return(result);
 516:driver/Core/cmsis_gcc.h **** }
 517:driver/Core/cmsis_gcc.h **** 
 518:driver/Core/cmsis_gcc.h **** 
 519:driver/Core/cmsis_gcc.h **** /**
 520:driver/Core/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 525:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 526:driver/Core/cmsis_gcc.h ****  */
 527:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:driver/Core/cmsis_gcc.h **** {
 529:driver/Core/cmsis_gcc.h ****    uint32_t result;
 530:driver/Core/cmsis_gcc.h **** 
 531:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:driver/Core/cmsis_gcc.h ****    return(result);
 533:driver/Core/cmsis_gcc.h **** }
 534:driver/Core/cmsis_gcc.h **** 
 535:driver/Core/cmsis_gcc.h **** 
 536:driver/Core/cmsis_gcc.h **** /**
 537:driver/Core/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:driver/Core/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:driver/Core/cmsis_gcc.h ****  */
 540:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:driver/Core/cmsis_gcc.h **** {
ARM GAS  /tmp/ccwOuJcR.s 			page 12


 542:driver/Core/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:driver/Core/cmsis_gcc.h **** }
 544:driver/Core/cmsis_gcc.h **** 
 545:driver/Core/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:driver/Core/cmsis_gcc.h **** 
 550:driver/Core/cmsis_gcc.h **** 
 551:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:driver/Core/cmsis_gcc.h **** /**
 555:driver/Core/cmsis_gcc.h ****   \brief   Signed Saturate
 556:driver/Core/cmsis_gcc.h ****   \details Saturates a signed value.
 557:driver/Core/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:driver/Core/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 560:driver/Core/cmsis_gcc.h ****  */
 561:driver/Core/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:driver/Core/cmsis_gcc.h **** __extension__ \
 563:driver/Core/cmsis_gcc.h **** ({                          \
 564:driver/Core/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:driver/Core/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:driver/Core/cmsis_gcc.h ****   __RES; \
 567:driver/Core/cmsis_gcc.h ****  })
 568:driver/Core/cmsis_gcc.h **** 
 569:driver/Core/cmsis_gcc.h **** 
 570:driver/Core/cmsis_gcc.h **** /**
 571:driver/Core/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:driver/Core/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:driver/Core/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:driver/Core/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 576:driver/Core/cmsis_gcc.h ****  */
 577:driver/Core/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:driver/Core/cmsis_gcc.h **** __extension__ \
 579:driver/Core/cmsis_gcc.h **** ({                          \
 580:driver/Core/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:driver/Core/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:driver/Core/cmsis_gcc.h ****   __RES; \
 583:driver/Core/cmsis_gcc.h ****  })
 584:driver/Core/cmsis_gcc.h **** 
 585:driver/Core/cmsis_gcc.h **** 
 586:driver/Core/cmsis_gcc.h **** /**
 587:driver/Core/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:driver/Core/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:driver/Core/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:driver/Core/cmsis_gcc.h ****   \return               Rotated value
 592:driver/Core/cmsis_gcc.h ****  */
 593:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:driver/Core/cmsis_gcc.h **** {
 595:driver/Core/cmsis_gcc.h ****   uint32_t result;
 596:driver/Core/cmsis_gcc.h **** 
 597:driver/Core/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:driver/Core/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccwOuJcR.s 			page 13


 599:driver/Core/cmsis_gcc.h **** }
 600:driver/Core/cmsis_gcc.h **** 
 601:driver/Core/cmsis_gcc.h **** 
 602:driver/Core/cmsis_gcc.h **** /**
 603:driver/Core/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:driver/Core/cmsis_gcc.h ****  */
 608:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:driver/Core/cmsis_gcc.h **** {
 610:driver/Core/cmsis_gcc.h ****     uint32_t result;
 611:driver/Core/cmsis_gcc.h **** 
 612:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:driver/Core/cmsis_gcc.h **** #else
 615:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:driver/Core/cmsis_gcc.h ****     */
 618:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:driver/Core/cmsis_gcc.h **** #endif
 620:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:driver/Core/cmsis_gcc.h **** }
 622:driver/Core/cmsis_gcc.h **** 
 623:driver/Core/cmsis_gcc.h **** 
 624:driver/Core/cmsis_gcc.h **** /**
 625:driver/Core/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:driver/Core/cmsis_gcc.h ****  */
 630:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:driver/Core/cmsis_gcc.h **** {
 632:driver/Core/cmsis_gcc.h ****     uint32_t result;
 633:driver/Core/cmsis_gcc.h **** 
 634:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:driver/Core/cmsis_gcc.h **** #else
 637:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:driver/Core/cmsis_gcc.h ****     */
 640:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:driver/Core/cmsis_gcc.h **** #endif
 642:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:driver/Core/cmsis_gcc.h **** }
 644:driver/Core/cmsis_gcc.h **** 
 645:driver/Core/cmsis_gcc.h **** 
 646:driver/Core/cmsis_gcc.h **** /**
 647:driver/Core/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:driver/Core/cmsis_gcc.h ****  */
 652:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:driver/Core/cmsis_gcc.h **** {
 654:driver/Core/cmsis_gcc.h ****     uint32_t result;
 655:driver/Core/cmsis_gcc.h **** 
ARM GAS  /tmp/ccwOuJcR.s 			page 14


 656:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:driver/Core/cmsis_gcc.h ****    return(result);
 658:driver/Core/cmsis_gcc.h **** }
 659:driver/Core/cmsis_gcc.h **** 
 660:driver/Core/cmsis_gcc.h **** 
 661:driver/Core/cmsis_gcc.h **** /**
 662:driver/Core/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:driver/Core/cmsis_gcc.h ****  */
 667:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:driver/Core/cmsis_gcc.h **** {
 669:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:driver/Core/cmsis_gcc.h **** }
 671:driver/Core/cmsis_gcc.h **** 
 672:driver/Core/cmsis_gcc.h **** 
 673:driver/Core/cmsis_gcc.h **** /**
 674:driver/Core/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:driver/Core/cmsis_gcc.h ****  */
 679:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:driver/Core/cmsis_gcc.h **** {
 681:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:driver/Core/cmsis_gcc.h **** }
 683:driver/Core/cmsis_gcc.h **** 
 684:driver/Core/cmsis_gcc.h **** 
 685:driver/Core/cmsis_gcc.h **** /**
 686:driver/Core/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:driver/Core/cmsis_gcc.h ****  */
 691:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:driver/Core/cmsis_gcc.h **** {
 693:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:driver/Core/cmsis_gcc.h **** }
 695:driver/Core/cmsis_gcc.h **** 
 696:driver/Core/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:driver/Core/cmsis_gcc.h **** 
 700:driver/Core/cmsis_gcc.h **** /**
 701:driver/Core/cmsis_gcc.h ****   \brief   Signed Saturate
 702:driver/Core/cmsis_gcc.h ****   \details Saturates a signed value.
 703:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:driver/Core/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 706:driver/Core/cmsis_gcc.h ****  */
 707:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:driver/Core/cmsis_gcc.h **** {
 709:driver/Core/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:driver/Core/cmsis_gcc.h ****   {
 711:driver/Core/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:driver/Core/cmsis_gcc.h ****     const int32_t min = -1 - max ;
ARM GAS  /tmp/ccwOuJcR.s 			page 15


 713:driver/Core/cmsis_gcc.h ****     if (val > max)
 714:driver/Core/cmsis_gcc.h ****     {
 715:driver/Core/cmsis_gcc.h ****       return max;
 716:driver/Core/cmsis_gcc.h ****     }
 717:driver/Core/cmsis_gcc.h ****     else if (val < min)
 718:driver/Core/cmsis_gcc.h ****     {
 719:driver/Core/cmsis_gcc.h ****       return min;
 720:driver/Core/cmsis_gcc.h ****     }
 721:driver/Core/cmsis_gcc.h ****   }
 722:driver/Core/cmsis_gcc.h ****   return val;
 723:driver/Core/cmsis_gcc.h **** }
 724:driver/Core/cmsis_gcc.h **** 
 725:driver/Core/cmsis_gcc.h **** /**
 726:driver/Core/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:driver/Core/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:driver/Core/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 731:driver/Core/cmsis_gcc.h ****  */
 732:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:driver/Core/cmsis_gcc.h **** {
 734:driver/Core/cmsis_gcc.h ****   if (sat <= 31U)
 735:driver/Core/cmsis_gcc.h ****   {
 736:driver/Core/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:driver/Core/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:driver/Core/cmsis_gcc.h ****     {
 739:driver/Core/cmsis_gcc.h ****       return max;
 740:driver/Core/cmsis_gcc.h ****     }
 741:driver/Core/cmsis_gcc.h ****     else if (val < 0)
 742:driver/Core/cmsis_gcc.h ****     {
 743:driver/Core/cmsis_gcc.h ****       return 0U;
 744:driver/Core/cmsis_gcc.h ****     }
 745:driver/Core/cmsis_gcc.h ****   }
 746:driver/Core/cmsis_gcc.h ****   return (uint32_t)val;
 747:driver/Core/cmsis_gcc.h **** }
 748:driver/Core/cmsis_gcc.h **** 
 749:driver/Core/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:driver/Core/cmsis_gcc.h **** 
 753:driver/Core/cmsis_gcc.h **** 
 754:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:driver/Core/cmsis_gcc.h **** /**
 757:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:driver/Core/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:driver/Core/cmsis_gcc.h ****  */
 762:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:driver/Core/cmsis_gcc.h **** {
 764:driver/Core/cmsis_gcc.h ****     uint32_t result;
 765:driver/Core/cmsis_gcc.h **** 
 766:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);
 768:driver/Core/cmsis_gcc.h **** }
 769:driver/Core/cmsis_gcc.h **** 
ARM GAS  /tmp/ccwOuJcR.s 			page 16


 770:driver/Core/cmsis_gcc.h **** 
 771:driver/Core/cmsis_gcc.h **** /**
 772:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:driver/Core/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:driver/Core/cmsis_gcc.h ****  */
 777:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:driver/Core/cmsis_gcc.h **** {
 779:driver/Core/cmsis_gcc.h ****     uint32_t result;
 780:driver/Core/cmsis_gcc.h **** 
 781:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);
 783:driver/Core/cmsis_gcc.h **** }
 784:driver/Core/cmsis_gcc.h **** 
 785:driver/Core/cmsis_gcc.h **** 
 786:driver/Core/cmsis_gcc.h **** /**
 787:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:driver/Core/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:driver/Core/cmsis_gcc.h ****  */
 792:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:driver/Core/cmsis_gcc.h **** {
 794:driver/Core/cmsis_gcc.h ****     uint32_t result;
 795:driver/Core/cmsis_gcc.h **** 
 796:driver/Core/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:driver/Core/cmsis_gcc.h ****    return(result);
 798:driver/Core/cmsis_gcc.h **** }
 799:driver/Core/cmsis_gcc.h **** 
 800:driver/Core/cmsis_gcc.h **** 
 801:driver/Core/cmsis_gcc.h **** /**
 802:driver/Core/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:driver/Core/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:driver/Core/cmsis_gcc.h ****  */
 807:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:driver/Core/cmsis_gcc.h **** {
 809:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:driver/Core/cmsis_gcc.h **** }
 811:driver/Core/cmsis_gcc.h **** 
 812:driver/Core/cmsis_gcc.h **** 
 813:driver/Core/cmsis_gcc.h **** /**
 814:driver/Core/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:driver/Core/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:driver/Core/cmsis_gcc.h ****  */
 819:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:driver/Core/cmsis_gcc.h **** {
 821:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:driver/Core/cmsis_gcc.h **** }
 823:driver/Core/cmsis_gcc.h **** 
 824:driver/Core/cmsis_gcc.h **** 
 825:driver/Core/cmsis_gcc.h **** /**
 826:driver/Core/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
ARM GAS  /tmp/ccwOuJcR.s 			page 17


 827:driver/Core/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:driver/Core/cmsis_gcc.h ****  */
 831:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:driver/Core/cmsis_gcc.h **** {
 833:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:driver/Core/cmsis_gcc.h **** }
 835:driver/Core/cmsis_gcc.h **** 
 836:driver/Core/cmsis_gcc.h **** 
 837:driver/Core/cmsis_gcc.h **** /**
 838:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:driver/Core/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:driver/Core/cmsis_gcc.h ****  */
 843:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:driver/Core/cmsis_gcc.h **** {
 845:driver/Core/cmsis_gcc.h ****     uint32_t result;
 846:driver/Core/cmsis_gcc.h **** 
 847:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);
 849:driver/Core/cmsis_gcc.h **** }
 850:driver/Core/cmsis_gcc.h **** 
 851:driver/Core/cmsis_gcc.h **** 
 852:driver/Core/cmsis_gcc.h **** /**
 853:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:driver/Core/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:driver/Core/cmsis_gcc.h ****  */
 858:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:driver/Core/cmsis_gcc.h **** {
 860:driver/Core/cmsis_gcc.h ****     uint32_t result;
 861:driver/Core/cmsis_gcc.h **** 
 862:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);
 864:driver/Core/cmsis_gcc.h **** }
 865:driver/Core/cmsis_gcc.h **** 
 866:driver/Core/cmsis_gcc.h **** 
 867:driver/Core/cmsis_gcc.h **** /**
 868:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:driver/Core/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:driver/Core/cmsis_gcc.h ****  */
 873:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:driver/Core/cmsis_gcc.h **** {
 875:driver/Core/cmsis_gcc.h ****     uint32_t result;
 876:driver/Core/cmsis_gcc.h **** 
 877:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:driver/Core/cmsis_gcc.h ****    return(result);
 879:driver/Core/cmsis_gcc.h **** }
 880:driver/Core/cmsis_gcc.h **** 
 881:driver/Core/cmsis_gcc.h **** 
 882:driver/Core/cmsis_gcc.h **** /**
 883:driver/Core/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
ARM GAS  /tmp/ccwOuJcR.s 			page 18


 884:driver/Core/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 888:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 889:driver/Core/cmsis_gcc.h ****  */
 890:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:driver/Core/cmsis_gcc.h **** {
 892:driver/Core/cmsis_gcc.h ****    uint32_t result;
 893:driver/Core/cmsis_gcc.h **** 
 894:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:driver/Core/cmsis_gcc.h ****    return(result);
 896:driver/Core/cmsis_gcc.h **** }
 897:driver/Core/cmsis_gcc.h **** 
 898:driver/Core/cmsis_gcc.h **** 
 899:driver/Core/cmsis_gcc.h **** /**
 900:driver/Core/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:driver/Core/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 905:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 906:driver/Core/cmsis_gcc.h ****  */
 907:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:driver/Core/cmsis_gcc.h **** {
 909:driver/Core/cmsis_gcc.h ****    uint32_t result;
 910:driver/Core/cmsis_gcc.h **** 
 911:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:driver/Core/cmsis_gcc.h ****    return(result);
 913:driver/Core/cmsis_gcc.h **** }
 914:driver/Core/cmsis_gcc.h **** 
 915:driver/Core/cmsis_gcc.h **** 
 916:driver/Core/cmsis_gcc.h **** /**
 917:driver/Core/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:driver/Core/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 922:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 923:driver/Core/cmsis_gcc.h ****  */
 924:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:driver/Core/cmsis_gcc.h **** {
 926:driver/Core/cmsis_gcc.h ****    uint32_t result;
 927:driver/Core/cmsis_gcc.h **** 
 928:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:driver/Core/cmsis_gcc.h ****    return(result);
 930:driver/Core/cmsis_gcc.h **** }
 931:driver/Core/cmsis_gcc.h **** 
 932:driver/Core/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:driver/Core/cmsis_gcc.h **** 
 935:driver/Core/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:driver/Core/cmsis_gcc.h **** 
 937:driver/Core/cmsis_gcc.h **** 
 938:driver/Core/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:driver/Core/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:driver/Core/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
ARM GAS  /tmp/ccwOuJcR.s 			page 19


 941:driver/Core/cmsis_gcc.h ****   @{
 942:driver/Core/cmsis_gcc.h ****  */
 943:driver/Core/cmsis_gcc.h **** 
 944:driver/Core/cmsis_gcc.h **** /**
 945:driver/Core/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:driver/Core/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:driver/Core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:driver/Core/cmsis_gcc.h ****  */
 949:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:driver/Core/cmsis_gcc.h **** {
 951:driver/Core/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:driver/Core/cmsis_gcc.h **** }
 953:driver/Core/cmsis_gcc.h **** 
 954:driver/Core/cmsis_gcc.h **** 
 955:driver/Core/cmsis_gcc.h **** /**
 956:driver/Core/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:driver/Core/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:driver/Core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:driver/Core/cmsis_gcc.h ****  */
 960:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
  49              		.loc 2 960 27 discriminator 1 view .LVU3
  50              	.LBB15:
 961:driver/Core/cmsis_gcc.h **** {
 962:driver/Core/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  51              		.loc 2 962 3 discriminator 1 view .LVU4
  52              		.syntax unified
  53              	@ 962 "driver/Core/cmsis_gcc.h" 1
  54 0002 72B6     		cpsid i
  55              	@ 0 "" 2
  56              		.thumb
  57              		.syntax unified
  58              	.LBE15:
  59              	.LBE14:
  37:src/main.c    ****         Log_s("Running Task 1");
  60              		.loc 1 37 9 discriminator 1 view .LVU5
  61 0004 0448     		ldr	r0, .L4
  62 0006 FFF7FEFF 		bl	Log_s
  63              	.LVL0:
  38:src/main.c    ****         __enable_irq();
  64              		.loc 1 38 9 discriminator 1 view .LVU6
  65              	.LBB16:
  66              	.LBI16:
 949:driver/Core/cmsis_gcc.h **** {
  67              		.loc 2 949 27 discriminator 1 view .LVU7
  68              	.LBB17:
 951:driver/Core/cmsis_gcc.h **** }
  69              		.loc 2 951 3 discriminator 1 view .LVU8
  70              		.syntax unified
  71              	@ 951 "driver/Core/cmsis_gcc.h" 1
  72 000a 62B6     		cpsie i
  73              	@ 0 "" 2
  74              		.thumb
  75              		.syntax unified
  76              	.LBE17:
  77              	.LBE16:
  39:src/main.c    ****         task_delay(500);
  78              		.loc 1 39 9 discriminator 1 view .LVU9
ARM GAS  /tmp/ccwOuJcR.s 			page 20


  79 000c 4FF4FA70 		mov	r0, #500
  80 0010 FFF7FEFF 		bl	task_delay
  81              	.LVL1:
  34:src/main.c    ****     {
  82              		.loc 1 34 11 discriminator 1 view .LVU10
  83 0014 F5E7     		b	.L2
  84              	.L5:
  85 0016 00BF     		.align	2
  86              	.L4:
  87 0018 00000000 		.word	.LC0
  88              		.cfi_endproc
  89              	.LFE138:
  91              		.section	.rodata.task_2.str1.4,"aMS",%progbits,1
  92              		.align	2
  93              	.LC1:
  94 0000 52756E6E 		.ascii	"Running Task 2\000"
  94      696E6720 
  94      5461736B 
  94      203200
  95              		.section	.text.task_2,"ax",%progbits
  96              		.align	1
  97              		.global	task_2
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu fpv4-sp-d16
 103              	task_2:
 104              	.LFB139:
  40:src/main.c    ****     }
  41:src/main.c    **** }
  42:src/main.c    **** 
  43:src/main.c    **** void task_2(void)                       // this function toggles Port B pin 6
  44:src/main.c    **** {
 105              		.loc 1 44 1 view -0
 106              		.cfi_startproc
 107              		@ Volatile: function does not return.
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110 0000 08B5     		push	{r3, lr}
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 3, -8
 114              		.cfi_offset 14, -4
 115              	.L7:
  45:src/main.c    ****     while (1)
 116              		.loc 1 45 5 discriminator 1 view .LVU12
  46:src/main.c    ****     {
  47:src/main.c    ****         __disable_irq();
 117              		.loc 1 47 9 discriminator 1 view .LVU13
 118              	.LBB18:
 119              	.LBI18:
 960:driver/Core/cmsis_gcc.h **** {
 120              		.loc 2 960 27 discriminator 1 view .LVU14
 121              	.LBB19:
 122              		.loc 2 962 3 discriminator 1 view .LVU15
 123              		.syntax unified
 124              	@ 962 "driver/Core/cmsis_gcc.h" 1
ARM GAS  /tmp/ccwOuJcR.s 			page 21


 125 0002 72B6     		cpsid i
 126              	@ 0 "" 2
 127              		.thumb
 128              		.syntax unified
 129              	.LBE19:
 130              	.LBE18:
  48:src/main.c    ****         Log_s("Running Task 2");
 131              		.loc 1 48 9 discriminator 1 view .LVU16
 132 0004 0448     		ldr	r0, .L9
 133 0006 FFF7FEFF 		bl	Log_s
 134              	.LVL2:
  49:src/main.c    ****         __enable_irq();
 135              		.loc 1 49 9 discriminator 1 view .LVU17
 136              	.LBB20:
 137              	.LBI20:
 949:driver/Core/cmsis_gcc.h **** {
 138              		.loc 2 949 27 discriminator 1 view .LVU18
 139              	.LBB21:
 951:driver/Core/cmsis_gcc.h **** }
 140              		.loc 2 951 3 discriminator 1 view .LVU19
 141              		.syntax unified
 142              	@ 951 "driver/Core/cmsis_gcc.h" 1
 143 000a 62B6     		cpsie i
 144              	@ 0 "" 2
 145              		.thumb
 146              		.syntax unified
 147              	.LBE21:
 148              	.LBE20:
  50:src/main.c    ****         task_delay(500);
 149              		.loc 1 50 9 discriminator 1 view .LVU20
 150 000c 4FF4FA70 		mov	r0, #500
 151 0010 FFF7FEFF 		bl	task_delay
 152              	.LVL3:
  45:src/main.c    ****     {
 153              		.loc 1 45 11 discriminator 1 view .LVU21
 154 0014 F5E7     		b	.L7
 155              	.L10:
 156 0016 00BF     		.align	2
 157              	.L9:
 158 0018 00000000 		.word	.LC1
 159              		.cfi_endproc
 160              	.LFE139:
 162              		.section	.rodata.task_3.str1.4,"aMS",%progbits,1
 163              		.align	2
 164              	.LC2:
 165 0000 52756E6E 		.ascii	"Running Task 3\000"
 165      696E6720 
 165      5461736B 
 165      203300
 166              		.section	.text.task_3,"ax",%progbits
 167              		.align	1
 168              		.global	task_3
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu fpv4-sp-d16
 174              	task_3:
ARM GAS  /tmp/ccwOuJcR.s 			page 22


 175              	.LFB140:
  51:src/main.c    ****     }
  52:src/main.c    **** }
  53:src/main.c    **** 
  54:src/main.c    **** void task_3(void)                       // this function toggles Port B pin 7
  55:src/main.c    **** {
 176              		.loc 1 55 1 view -0
 177              		.cfi_startproc
 178              		@ Volatile: function does not return.
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181 0000 08B5     		push	{r3, lr}
 182              	.LCFI2:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 3, -8
 185              		.cfi_offset 14, -4
 186              	.L12:
  56:src/main.c    ****     while (1)
 187              		.loc 1 56 5 discriminator 1 view .LVU23
  57:src/main.c    ****     {
  58:src/main.c    ****         __disable_irq();
 188              		.loc 1 58 9 discriminator 1 view .LVU24
 189              	.LBB22:
 190              	.LBI22:
 960:driver/Core/cmsis_gcc.h **** {
 191              		.loc 2 960 27 discriminator 1 view .LVU25
 192              	.LBB23:
 193              		.loc 2 962 3 discriminator 1 view .LVU26
 194              		.syntax unified
 195              	@ 962 "driver/Core/cmsis_gcc.h" 1
 196 0002 72B6     		cpsid i
 197              	@ 0 "" 2
 198              		.thumb
 199              		.syntax unified
 200              	.LBE23:
 201              	.LBE22:
  59:src/main.c    ****         Log_s("Running Task 3");
 202              		.loc 1 59 9 discriminator 1 view .LVU27
 203 0004 0448     		ldr	r0, .L14
 204 0006 FFF7FEFF 		bl	Log_s
 205              	.LVL4:
  60:src/main.c    ****         __enable_irq();
 206              		.loc 1 60 9 discriminator 1 view .LVU28
 207              	.LBB24:
 208              	.LBI24:
 949:driver/Core/cmsis_gcc.h **** {
 209              		.loc 2 949 27 discriminator 1 view .LVU29
 210              	.LBB25:
 951:driver/Core/cmsis_gcc.h **** }
 211              		.loc 2 951 3 discriminator 1 view .LVU30
 212              		.syntax unified
 213              	@ 951 "driver/Core/cmsis_gcc.h" 1
 214 000a 62B6     		cpsie i
 215              	@ 0 "" 2
 216              		.thumb
 217              		.syntax unified
 218              	.LBE25:
ARM GAS  /tmp/ccwOuJcR.s 			page 23


 219              	.LBE24:
  61:src/main.c    ****         task_delay(1000);
 220              		.loc 1 61 9 discriminator 1 view .LVU31
 221 000c 4FF47A70 		mov	r0, #1000
 222 0010 FFF7FEFF 		bl	task_delay
 223              	.LVL5:
  56:src/main.c    ****     {
 224              		.loc 1 56 11 discriminator 1 view .LVU32
 225 0014 F5E7     		b	.L12
 226              	.L15:
 227 0016 00BF     		.align	2
 228              	.L14:
 229 0018 00000000 		.word	.LC2
 230              		.cfi_endproc
 231              	.LFE140:
 233              		.section	.text.Blink_task,"ax",%progbits
 234              		.align	1
 235              		.global	Blink_task
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu fpv4-sp-d16
 241              	Blink_task:
 242              	.LFB141:
  62:src/main.c    ****     }
  63:src/main.c    **** }
  64:src/main.c    **** 
  65:src/main.c    **** void Blink_task(void)
  66:src/main.c    **** {
 243              		.loc 1 66 1 view -0
 244              		.cfi_startproc
 245              		@ Volatile: function does not return.
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248 0000 08B5     		push	{r3, lr}
 249              	.LCFI3:
 250              		.cfi_def_cfa_offset 8
 251              		.cfi_offset 3, -8
 252              		.cfi_offset 14, -4
 253              	.L17:
  67:src/main.c    ****     while (1)
 254              		.loc 1 67 5 discriminator 1 view .LVU34
  68:src/main.c    ****     {
  69:src/main.c    ****         GPIOB->ODR ^= GPIO_ODR_OD5;
 255              		.loc 1 69 9 discriminator 1 view .LVU35
 256              		.loc 1 69 20 is_stmt 0 discriminator 1 view .LVU36
 257 0002 044A     		ldr	r2, .L19
 258 0004 5369     		ldr	r3, [r2, #20]
 259 0006 83F02003 		eor	r3, r3, #32
 260 000a 5361     		str	r3, [r2, #20]
  70:src/main.c    ****         task_delay(100);
 261              		.loc 1 70 9 is_stmt 1 discriminator 1 view .LVU37
 262 000c 6420     		movs	r0, #100
 263 000e FFF7FEFF 		bl	task_delay
 264              	.LVL6:
  67:src/main.c    ****     while (1)
 265              		.loc 1 67 11 discriminator 1 view .LVU38
ARM GAS  /tmp/ccwOuJcR.s 			page 24


 266 0012 F6E7     		b	.L17
 267              	.L20:
 268              		.align	2
 269              	.L19:
 270 0014 00040240 		.word	1073873920
 271              		.cfi_endproc
 272              	.LFE141:
 274              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 275              		.align	2
 276              	.LC3:
 277 0000 5072696F 		.ascii	"Priority Preemptive scheduler Program.\012\000"
 277      72697479 
 277      20507265 
 277      656D7074 
 277      69766520 
 278              		.align	2
 279              	.LC4:
 280 0028 43726561 		.ascii	"Creating tasks...\000"
 280      74696E67 
 280      20746173 
 280      6B732E2E 
 280      2E00
 281 003a 0000     		.align	2
 282              	.LC5:
 283 003c 5461736B 		.ascii	"Task 1\000"
 283      203100
 284 0043 00       		.align	2
 285              	.LC6:
 286 0044 5461736B 		.ascii	"Task 2\000"
 286      203200
 287 004b 00       		.align	2
 288              	.LC7:
 289 004c 5461736B 		.ascii	"Task 3\000"
 289      203300
 290 0053 00       		.align	2
 291              	.LC8:
 292 0054 426C696E 		.ascii	"Blink Task\000"
 292      6B205461 
 292      736B00
 293 005f 00       		.align	2
 294              	.LC9:
 295 0060 5461736B 		.ascii	"Tasks created sucessfully.\012\000"
 295      73206372 
 295      65617465 
 295      64207375 
 295      63657373 
 296              		.align	2
 297              	.LC10:
 298 007c 53746172 		.ascii	"Starting scheduler...\000"
 298      74696E67 
 298      20736368 
 298      6564756C 
 298      65722E2E 
 299              		.section	.text.main,"ax",%progbits
 300              		.align	1
 301              		.global	main
 302              		.syntax unified
ARM GAS  /tmp/ccwOuJcR.s 			page 25


 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	main:
 308              	.LFB137:
  11:src/main.c    ****     SystemInit();                       // Initialize system
 309              		.loc 1 11 1 view -0
 310              		.cfi_startproc
 311              		@ Volatile: function does not return.
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314 0000 08B5     		push	{r3, lr}
 315              	.LCFI4:
 316              		.cfi_def_cfa_offset 8
 317              		.cfi_offset 3, -8
 318              		.cfi_offset 14, -4
  12:src/main.c    **** 
 319              		.loc 1 12 5 view .LVU40
 320 0002 FFF7FEFF 		bl	SystemInit
 321              	.LVL7:
  14:src/main.c    **** 
 322              		.loc 1 14 5 view .LVU41
 323 0006 1148     		ldr	r0, .L24
 324 0008 FFF7FEFF 		bl	Log_s
 325              	.LVL8:
  16:src/main.c    ****     createTask(task_1, "Task 1", 3);    // create task
 326              		.loc 1 16 5 view .LVU42
 327 000c 1048     		ldr	r0, .L24+4
 328 000e FFF7FEFF 		bl	Log_s
 329              	.LVL9:
  17:src/main.c    ****     createTask(task_2, "Task 2", 2);
 330              		.loc 1 17 5 view .LVU43
 331 0012 0322     		movs	r2, #3
 332 0014 0F49     		ldr	r1, .L24+8
 333 0016 1048     		ldr	r0, .L24+12
 334 0018 FFF7FEFF 		bl	createTask
 335              	.LVL10:
  18:src/main.c    ****     createTask(task_3, "Task 3", 1);
 336              		.loc 1 18 5 view .LVU44
 337 001c 0222     		movs	r2, #2
 338 001e 0F49     		ldr	r1, .L24+16
 339 0020 0F48     		ldr	r0, .L24+20
 340 0022 FFF7FEFF 		bl	createTask
 341              	.LVL11:
  19:src/main.c    ****     createTask(Blink_task, "Blink Task", 0);
 342              		.loc 1 19 5 view .LVU45
 343 0026 0122     		movs	r2, #1
 344 0028 0E49     		ldr	r1, .L24+24
 345 002a 0F48     		ldr	r0, .L24+28
 346 002c FFF7FEFF 		bl	createTask
 347              	.LVL12:
  20:src/main.c    ****     Log_s("Tasks created sucessfully.\n");
 348              		.loc 1 20 5 view .LVU46
 349 0030 0022     		movs	r2, #0
 350 0032 0E49     		ldr	r1, .L24+32
 351 0034 0E48     		ldr	r0, .L24+36
 352 0036 FFF7FEFF 		bl	createTask
ARM GAS  /tmp/ccwOuJcR.s 			page 26


 353              	.LVL13:
  21:src/main.c    **** 
 354              		.loc 1 21 5 view .LVU47
 355 003a 0E48     		ldr	r0, .L24+40
 356 003c FFF7FEFF 		bl	Log_s
 357              	.LVL14:
  23:src/main.c    ****     start_scheduler();                  // Start scheduling the tasks
 358              		.loc 1 23 5 view .LVU48
 359 0040 0D48     		ldr	r0, .L24+44
 360 0042 FFF7FEFF 		bl	Log_s
 361              	.LVL15:
  24:src/main.c    **** 
 362              		.loc 1 24 5 view .LVU49
 363 0046 FFF7FEFF 		bl	start_scheduler
 364              	.LVL16:
 365              	.L22:
  26:src/main.c    ****     {
 366              		.loc 1 26 5 discriminator 1 view .LVU50
  29:src/main.c    **** }
 367              		.loc 1 29 5 discriminator 1 view .LVU51
  26:src/main.c    ****     {
 368              		.loc 1 26 11 discriminator 1 view .LVU52
 369 004a FEE7     		b	.L22
 370              	.L25:
 371              		.align	2
 372              	.L24:
 373 004c 00000000 		.word	.LC3
 374 0050 28000000 		.word	.LC4
 375 0054 3C000000 		.word	.LC5
 376 0058 00000000 		.word	task_1
 377 005c 44000000 		.word	.LC6
 378 0060 00000000 		.word	task_2
 379 0064 4C000000 		.word	.LC7
 380 0068 00000000 		.word	task_3
 381 006c 54000000 		.word	.LC8
 382 0070 00000000 		.word	Blink_task
 383 0074 60000000 		.word	.LC9
 384 0078 7C000000 		.word	.LC10
 385              		.cfi_endproc
 386              	.LFE137:
 388              		.text
 389              	.Letext0:
 390              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 391              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 392              		.file 5 "driver/Device/stm32f401xc.h"
 393              		.file 6 "inc/scheduler.h"
 394              		.file 7 "inc/Log.h"
 395              		.file 8 "inc/main.h"
 396              		.file 9 "inc/task.h"
ARM GAS  /tmp/ccwOuJcR.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccwOuJcR.s:18     .rodata.task_1.str1.4:0000000000000000 $d
     /tmp/ccwOuJcR.s:22     .text.task_1:0000000000000000 $t
     /tmp/ccwOuJcR.s:30     .text.task_1:0000000000000000 task_1
     /tmp/ccwOuJcR.s:87     .text.task_1:0000000000000018 $d
     /tmp/ccwOuJcR.s:92     .rodata.task_2.str1.4:0000000000000000 $d
     /tmp/ccwOuJcR.s:96     .text.task_2:0000000000000000 $t
     /tmp/ccwOuJcR.s:103    .text.task_2:0000000000000000 task_2
     /tmp/ccwOuJcR.s:158    .text.task_2:0000000000000018 $d
     /tmp/ccwOuJcR.s:163    .rodata.task_3.str1.4:0000000000000000 $d
     /tmp/ccwOuJcR.s:167    .text.task_3:0000000000000000 $t
     /tmp/ccwOuJcR.s:174    .text.task_3:0000000000000000 task_3
     /tmp/ccwOuJcR.s:229    .text.task_3:0000000000000018 $d
     /tmp/ccwOuJcR.s:234    .text.Blink_task:0000000000000000 $t
     /tmp/ccwOuJcR.s:241    .text.Blink_task:0000000000000000 Blink_task
     /tmp/ccwOuJcR.s:270    .text.Blink_task:0000000000000014 $d
     /tmp/ccwOuJcR.s:275    .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccwOuJcR.s:300    .text.main:0000000000000000 $t
     /tmp/ccwOuJcR.s:307    .text.main:0000000000000000 main
     /tmp/ccwOuJcR.s:373    .text.main:000000000000004c $d

UNDEFINED SYMBOLS
Log_s
task_delay
SystemInit
createTask
start_scheduler
