ARM GAS  /tmp/ccZYixRy.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mutex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.pushWaitingQueue,"ax",%progbits
  18              		.align	1
  19              		.global	pushWaitingQueue
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	pushWaitingQueue:
  27              	.LVL0:
  28              	.LFB137:
  29              		.file 1 "src/mutex.c"
   1:src/mutex.c   **** #include "mutex.h"
   2:src/mutex.c   **** 
   3:src/mutex.c   **** extern TCB_Typedef* getCurrentTask(void);
   4:src/mutex.c   **** extern task_list* idle_task;			// defined in task.c
   5:src/mutex.c   **** 
   6:src/mutex.c   **** void pushWaitingQueue(task_list** mutexListHead, TCB_Typedef* current_task)
   7:src/mutex.c   **** {
  30              		.loc 1 7 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 7 1 is_stmt 0 view .LVU1
  35 0000 70B5     		push	{r4, r5, r6, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 4, -16
  39              		.cfi_offset 5, -12
  40              		.cfi_offset 6, -8
  41              		.cfi_offset 14, -4
  42 0002 0646     		mov	r6, r0
  43 0004 0C46     		mov	r4, r1
   8:src/mutex.c   ****     task_list* newNode = (task_list*)malloc(sizeof(task_list));
  44              		.loc 1 8 5 is_stmt 1 view .LVU2
  45              		.loc 1 8 38 is_stmt 0 view .LVU3
  46 0006 1820     		movs	r0, #24
  47              	.LVL1:
  48              		.loc 1 8 38 view .LVU4
  49 0008 FFF7FEFF 		bl	malloc
  50              	.LVL2:
ARM GAS  /tmp/ccZYixRy.s 			page 2


  51              		.loc 1 8 38 view .LVU5
  52 000c 0546     		mov	r5, r0
  53              	.LVL3:
   9:src/mutex.c   ****     newNode->next = NULL;
  54              		.loc 1 9 5 is_stmt 1 view .LVU6
  55              		.loc 1 9 19 is_stmt 0 view .LVU7
  56 000e 0023     		movs	r3, #0
  57 0010 4361     		str	r3, [r0, #20]
  10:src/mutex.c   ****     newNode->tcb = *current_task;
  58              		.loc 1 10 5 is_stmt 1 view .LVU8
  59              		.loc 1 10 18 is_stmt 0 view .LVU9
  60 0012 8646     		mov	lr, r0
  61 0014 A446     		mov	ip, r4
  62 0016 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
  63              	.LVL4:
  64              		.loc 1 10 18 view .LVU10
  65 001a AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
  66 001e DCF80030 		ldr	r3, [ip]
  67 0022 CEF80030 		str	r3, [lr]
  11:src/mutex.c   **** 
  12:src/mutex.c   ****     if (*mutexListHead == NULL)
  68              		.loc 1 12 5 is_stmt 1 view .LVU11
  69              		.loc 1 12 9 is_stmt 0 view .LVU12
  70 0026 3368     		ldr	r3, [r6]
  71              		.loc 1 12 8 view .LVU13
  72 0028 2BB1     		cbz	r3, .L5
  73              	.L2:
  74              	.LVL5:
  75              	.LBB13:
  13:src/mutex.c   ****     {
  14:src/mutex.c   ****         *mutexListHead = newNode;
  15:src/mutex.c   ****     }
  16:src/mutex.c   ****     else
  17:src/mutex.c   ****     {
  18:src/mutex.c   ****         task_list* temp = *mutexListHead;
  19:src/mutex.c   ****         while (temp->next != NULL)
  76              		.loc 1 19 15 is_stmt 1 view .LVU14
  77 002a 1A46     		mov	r2, r3
  78              		.loc 1 19 20 is_stmt 0 view .LVU15
  79 002c 5B69     		ldr	r3, [r3, #20]
  80              	.LVL6:
  81              		.loc 1 19 15 view .LVU16
  82 002e 002B     		cmp	r3, #0
  83 0030 FBD1     		bne	.L2
  20:src/mutex.c   ****         {
  21:src/mutex.c   ****             temp = temp->next;
  22:src/mutex.c   ****         }
  23:src/mutex.c   ****         temp->next = newNode;
  84              		.loc 1 23 9 is_stmt 1 view .LVU17
  85              		.loc 1 23 20 is_stmt 0 view .LVU18
  86 0032 5561     		str	r5, [r2, #20]
  87              	.LVL7:
  88              	.L1:
  89              		.loc 1 23 20 view .LVU19
  90              	.LBE13:
  24:src/mutex.c   ****     }
  25:src/mutex.c   **** }
ARM GAS  /tmp/ccZYixRy.s 			page 3


  91              		.loc 1 25 1 view .LVU20
  92 0034 70BD     		pop	{r4, r5, r6, pc}
  93              	.LVL8:
  94              	.L5:
  14:src/mutex.c   ****     }
  95              		.loc 1 14 9 is_stmt 1 view .LVU21
  14:src/mutex.c   ****     }
  96              		.loc 1 14 24 is_stmt 0 view .LVU22
  97 0036 3560     		str	r5, [r6]
  98 0038 FCE7     		b	.L1
  99              		.cfi_endproc
 100              	.LFE137:
 102              		.section	.text.popWaitingQueue,"ax",%progbits
 103              		.align	1
 104              		.global	popWaitingQueue
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv4-sp-d16
 110              	popWaitingQueue:
 111              	.LVL9:
 112              	.LFB138:
  26:src/mutex.c   **** 
  27:src/mutex.c   **** TCB_Typedef* popWaitingQueue(task_list** mutexListHead)
  28:src/mutex.c   **** {
 113              		.loc 1 28 1 is_stmt 1 view -0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		.loc 1 28 1 is_stmt 0 view .LVU24
 118 0000 10B5     		push	{r4, lr}
 119              	.LCFI1:
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 4, -8
 122              		.cfi_offset 14, -4
 123 0002 0346     		mov	r3, r0
  29:src/mutex.c   ****     if (*mutexListHead == NULL)
 124              		.loc 1 29 5 is_stmt 1 view .LVU25
 125              		.loc 1 29 9 is_stmt 0 view .LVU26
 126 0004 0068     		ldr	r0, [r0]
 127              	.LVL10:
 128              		.loc 1 29 8 view .LVU27
 129 0006 30B1     		cbz	r0, .L8
  30:src/mutex.c   ****     {
  31:src/mutex.c   ****         return NULL;
  32:src/mutex.c   ****     }
  33:src/mutex.c   **** 
  34:src/mutex.c   ****     TCB_Typedef* next_task = &(*mutexListHead)->tcb;
 130              		.loc 1 34 5 is_stmt 1 view .LVU28
 131              		.loc 1 34 18 is_stmt 0 view .LVU29
 132 0008 0446     		mov	r4, r0
 133              	.LVL11:
  35:src/mutex.c   ****     task_list* temp = *mutexListHead;
 134              		.loc 1 35 5 is_stmt 1 view .LVU30
  36:src/mutex.c   ****     *mutexListHead = (*mutexListHead)->next;
 135              		.loc 1 36 5 view .LVU31
 136              		.loc 1 36 38 is_stmt 0 view .LVU32
ARM GAS  /tmp/ccZYixRy.s 			page 4


 137 000a 4269     		ldr	r2, [r0, #20]
 138              		.loc 1 36 20 view .LVU33
 139 000c 1A60     		str	r2, [r3]
  37:src/mutex.c   ****     free(temp);
 140              		.loc 1 37 5 is_stmt 1 view .LVU34
 141 000e FFF7FEFF 		bl	free
 142              	.LVL12:
  38:src/mutex.c   ****     
  39:src/mutex.c   ****     return next_task;
 143              		.loc 1 39 5 view .LVU35
 144              	.L6:
  40:src/mutex.c   **** }
 145              		.loc 1 40 1 is_stmt 0 view .LVU36
 146 0012 2046     		mov	r0, r4
 147 0014 10BD     		pop	{r4, pc}
 148              	.LVL13:
 149              	.L8:
  31:src/mutex.c   ****     }
 150              		.loc 1 31 16 view .LVU37
 151 0016 0446     		mov	r4, r0
 152 0018 FBE7     		b	.L6
 153              		.cfi_endproc
 154              	.LFE138:
 156              		.section	.rodata.MutexTake.str1.4,"aMS",%progbits,1
 157              		.align	2
 158              	.LC0:
 159 0000 4C6F636B 		.ascii	"Lock aquired task:\000"
 159      20617175 
 159      69726564 
 159      20746173 
 159      6B3A00
 160 0013 00       		.align	2
 161              	.LC1:
 162 0014 50757368 		.ascii	"Pushed task in waiting queue:\000"
 162      65642074 
 162      61736B20 
 162      696E2077 
 162      61697469 
 163              		.section	.text.MutexTake,"ax",%progbits
 164              		.align	1
 165              		.global	MutexTake
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu fpv4-sp-d16
 171              	MutexTake:
 172              	.LVL14:
 173              	.LFB139:
  41:src/mutex.c   **** 
  42:src/mutex.c   **** void MutexTake(Mutex_Typedef* mutex)
  43:src/mutex.c   **** {
 174              		.loc 1 43 1 is_stmt 1 view -0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              		.loc 1 43 1 is_stmt 0 view .LVU39
 179 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccZYixRy.s 			page 5


 180              	.LCFI2:
 181              		.cfi_def_cfa_offset 16
 182              		.cfi_offset 3, -16
 183              		.cfi_offset 4, -12
 184              		.cfi_offset 5, -8
 185              		.cfi_offset 14, -4
 186 0002 0546     		mov	r5, r0
  44:src/mutex.c   ****     __disable_irq();
 187              		.loc 1 44 5 is_stmt 1 view .LVU40
 188              	.LBB14:
 189              	.LBI14:
 190              		.file 2 "driver/Core/cmsis_gcc.h"
   1:driver/Core/cmsis_gcc.h **** /**************************************************************************//**
   2:driver/Core/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:driver/Core/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:driver/Core/cmsis_gcc.h ****  * @version  V5.4.1
   5:driver/Core/cmsis_gcc.h ****  * @date     27. May 2021
   6:driver/Core/cmsis_gcc.h ****  ******************************************************************************/
   7:driver/Core/cmsis_gcc.h **** /*
   8:driver/Core/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:driver/Core/cmsis_gcc.h ****  *
  10:driver/Core/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:driver/Core/cmsis_gcc.h ****  *
  12:driver/Core/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:driver/Core/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:driver/Core/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:driver/Core/cmsis_gcc.h ****  *
  16:driver/Core/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:driver/Core/cmsis_gcc.h ****  *
  18:driver/Core/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:driver/Core/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:driver/Core/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:driver/Core/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:driver/Core/cmsis_gcc.h ****  * limitations under the License.
  23:driver/Core/cmsis_gcc.h ****  */
  24:driver/Core/cmsis_gcc.h **** 
  25:driver/Core/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:driver/Core/cmsis_gcc.h **** 
  28:driver/Core/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:driver/Core/cmsis_gcc.h **** 
  34:driver/Core/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:driver/Core/cmsis_gcc.h **** #ifndef __has_builtin
  36:driver/Core/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:driver/Core/cmsis_gcc.h **** #endif
  38:driver/Core/cmsis_gcc.h **** 
  39:driver/Core/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:driver/Core/cmsis_gcc.h **** #ifndef   __ASM
  41:driver/Core/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:driver/Core/cmsis_gcc.h **** #endif
  43:driver/Core/cmsis_gcc.h **** #ifndef   __INLINE
  44:driver/Core/cmsis_gcc.h ****   #define __INLINE                               inline
  45:driver/Core/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccZYixRy.s 			page 6


  46:driver/Core/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:driver/Core/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:driver/Core/cmsis_gcc.h **** #endif
  49:driver/Core/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:driver/Core/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:driver/Core/cmsis_gcc.h **** #endif
  52:driver/Core/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:driver/Core/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:driver/Core/cmsis_gcc.h **** #endif
  55:driver/Core/cmsis_gcc.h **** #ifndef   __USED
  56:driver/Core/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:driver/Core/cmsis_gcc.h **** #endif
  58:driver/Core/cmsis_gcc.h **** #ifndef   __WEAK
  59:driver/Core/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:driver/Core/cmsis_gcc.h **** #endif
  61:driver/Core/cmsis_gcc.h **** #ifndef   __PACKED
  62:driver/Core/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:driver/Core/cmsis_gcc.h **** #endif
  64:driver/Core/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:driver/Core/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:driver/Core/cmsis_gcc.h **** #endif
  67:driver/Core/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:driver/Core/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:driver/Core/cmsis_gcc.h **** #endif
  70:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:driver/Core/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:driver/Core/cmsis_gcc.h **** #endif
  78:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:driver/Core/cmsis_gcc.h **** #endif
  86:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:driver/Core/cmsis_gcc.h **** #endif
  94:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:driver/Core/cmsis_gcc.h **** #endif
 102:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
ARM GAS  /tmp/ccZYixRy.s 			page 7


 103:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:driver/Core/cmsis_gcc.h **** #endif
 110:driver/Core/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:driver/Core/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:driver/Core/cmsis_gcc.h **** #endif
 113:driver/Core/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:driver/Core/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:driver/Core/cmsis_gcc.h **** #endif
 116:driver/Core/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:driver/Core/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:driver/Core/cmsis_gcc.h **** #endif
 119:driver/Core/cmsis_gcc.h **** 
 120:driver/Core/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:driver/Core/cmsis_gcc.h **** 
 122:driver/Core/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:driver/Core/cmsis_gcc.h **** 
 124:driver/Core/cmsis_gcc.h **** /**
 125:driver/Core/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:driver/Core/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:driver/Core/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:driver/Core/cmsis_gcc.h ****            in the used linker script.
 129:driver/Core/cmsis_gcc.h **** 
 130:driver/Core/cmsis_gcc.h ****  */
 131:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:driver/Core/cmsis_gcc.h **** {
 133:driver/Core/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:driver/Core/cmsis_gcc.h **** 
 135:driver/Core/cmsis_gcc.h ****   typedef struct {
 136:driver/Core/cmsis_gcc.h ****     uint32_t const* src;
 137:driver/Core/cmsis_gcc.h ****     uint32_t* dest;
 138:driver/Core/cmsis_gcc.h ****     uint32_t  wlen;
 139:driver/Core/cmsis_gcc.h ****   } __copy_table_t;
 140:driver/Core/cmsis_gcc.h **** 
 141:driver/Core/cmsis_gcc.h ****   typedef struct {
 142:driver/Core/cmsis_gcc.h ****     uint32_t* dest;
 143:driver/Core/cmsis_gcc.h ****     uint32_t  wlen;
 144:driver/Core/cmsis_gcc.h ****   } __zero_table_t;
 145:driver/Core/cmsis_gcc.h **** 
 146:driver/Core/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:driver/Core/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:driver/Core/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:driver/Core/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:driver/Core/cmsis_gcc.h **** 
 151:driver/Core/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:driver/Core/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:driver/Core/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:driver/Core/cmsis_gcc.h ****     }
 155:driver/Core/cmsis_gcc.h ****   }
 156:driver/Core/cmsis_gcc.h **** 
 157:driver/Core/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:driver/Core/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:driver/Core/cmsis_gcc.h ****       pTable->dest[i] = 0u;
ARM GAS  /tmp/ccZYixRy.s 			page 8


 160:driver/Core/cmsis_gcc.h ****     }
 161:driver/Core/cmsis_gcc.h ****   }
 162:driver/Core/cmsis_gcc.h **** 
 163:driver/Core/cmsis_gcc.h ****   _start();
 164:driver/Core/cmsis_gcc.h **** }
 165:driver/Core/cmsis_gcc.h **** 
 166:driver/Core/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:driver/Core/cmsis_gcc.h **** #endif
 168:driver/Core/cmsis_gcc.h **** 
 169:driver/Core/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:driver/Core/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:driver/Core/cmsis_gcc.h **** #endif
 172:driver/Core/cmsis_gcc.h **** 
 173:driver/Core/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:driver/Core/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:driver/Core/cmsis_gcc.h **** #endif
 176:driver/Core/cmsis_gcc.h **** 
 177:driver/Core/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:driver/Core/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:driver/Core/cmsis_gcc.h **** #endif
 180:driver/Core/cmsis_gcc.h **** 
 181:driver/Core/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:driver/Core/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:driver/Core/cmsis_gcc.h **** #endif
 184:driver/Core/cmsis_gcc.h **** 
 185:driver/Core/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:driver/Core/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:driver/Core/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:driver/Core/cmsis_gcc.h **** #endif
 189:driver/Core/cmsis_gcc.h **** 
 190:driver/Core/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:driver/Core/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:driver/Core/cmsis_gcc.h **** #endif
 193:driver/Core/cmsis_gcc.h **** 
 194:driver/Core/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:driver/Core/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:driver/Core/cmsis_gcc.h **** #endif
 197:driver/Core/cmsis_gcc.h **** 
 198:driver/Core/cmsis_gcc.h **** 
 199:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:driver/Core/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:driver/Core/cmsis_gcc.h **** }
 202:driver/Core/cmsis_gcc.h **** #endif
 203:driver/Core/cmsis_gcc.h **** 
 204:driver/Core/cmsis_gcc.h **** 
 205:driver/Core/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:driver/Core/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:driver/Core/cmsis_gcc.h ****   Access to dedicated instructions
 208:driver/Core/cmsis_gcc.h ****   @{
 209:driver/Core/cmsis_gcc.h **** */
 210:driver/Core/cmsis_gcc.h **** 
 211:driver/Core/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:driver/Core/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:driver/Core/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:driver/Core/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
ARM GAS  /tmp/ccZYixRy.s 			page 9


 217:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:driver/Core/cmsis_gcc.h **** #else
 219:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:driver/Core/cmsis_gcc.h **** #endif
 223:driver/Core/cmsis_gcc.h **** 
 224:driver/Core/cmsis_gcc.h **** /**
 225:driver/Core/cmsis_gcc.h ****   \brief   No Operation
 226:driver/Core/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:driver/Core/cmsis_gcc.h ****  */
 228:driver/Core/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:driver/Core/cmsis_gcc.h **** 
 230:driver/Core/cmsis_gcc.h **** /**
 231:driver/Core/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:driver/Core/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:driver/Core/cmsis_gcc.h ****  */
 234:driver/Core/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:driver/Core/cmsis_gcc.h **** 
 236:driver/Core/cmsis_gcc.h **** 
 237:driver/Core/cmsis_gcc.h **** /**
 238:driver/Core/cmsis_gcc.h ****   \brief   Wait For Event
 239:driver/Core/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:driver/Core/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:driver/Core/cmsis_gcc.h ****  */
 242:driver/Core/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:driver/Core/cmsis_gcc.h **** 
 244:driver/Core/cmsis_gcc.h **** 
 245:driver/Core/cmsis_gcc.h **** /**
 246:driver/Core/cmsis_gcc.h ****   \brief   Send Event
 247:driver/Core/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:driver/Core/cmsis_gcc.h ****  */
 249:driver/Core/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:driver/Core/cmsis_gcc.h **** 
 251:driver/Core/cmsis_gcc.h **** 
 252:driver/Core/cmsis_gcc.h **** /**
 253:driver/Core/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:driver/Core/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:driver/Core/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:driver/Core/cmsis_gcc.h ****            after the instruction has been completed.
 257:driver/Core/cmsis_gcc.h ****  */
 258:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:driver/Core/cmsis_gcc.h **** {
 260:driver/Core/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:driver/Core/cmsis_gcc.h **** }
 262:driver/Core/cmsis_gcc.h **** 
 263:driver/Core/cmsis_gcc.h **** 
 264:driver/Core/cmsis_gcc.h **** /**
 265:driver/Core/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:driver/Core/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:driver/Core/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:driver/Core/cmsis_gcc.h ****  */
 269:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:driver/Core/cmsis_gcc.h **** {
 271:driver/Core/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:driver/Core/cmsis_gcc.h **** }
 273:driver/Core/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZYixRy.s 			page 10


 274:driver/Core/cmsis_gcc.h **** 
 275:driver/Core/cmsis_gcc.h **** /**
 276:driver/Core/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:driver/Core/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:driver/Core/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:driver/Core/cmsis_gcc.h ****  */
 280:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:driver/Core/cmsis_gcc.h **** {
 282:driver/Core/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:driver/Core/cmsis_gcc.h **** }
 284:driver/Core/cmsis_gcc.h **** 
 285:driver/Core/cmsis_gcc.h **** 
 286:driver/Core/cmsis_gcc.h **** /**
 287:driver/Core/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:driver/Core/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 291:driver/Core/cmsis_gcc.h ****  */
 292:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:driver/Core/cmsis_gcc.h **** {
 294:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:driver/Core/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:driver/Core/cmsis_gcc.h **** #else
 297:driver/Core/cmsis_gcc.h ****   uint32_t result;
 298:driver/Core/cmsis_gcc.h **** 
 299:driver/Core/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:driver/Core/cmsis_gcc.h ****   return result;
 301:driver/Core/cmsis_gcc.h **** #endif
 302:driver/Core/cmsis_gcc.h **** }
 303:driver/Core/cmsis_gcc.h **** 
 304:driver/Core/cmsis_gcc.h **** 
 305:driver/Core/cmsis_gcc.h **** /**
 306:driver/Core/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:driver/Core/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 310:driver/Core/cmsis_gcc.h ****  */
 311:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:driver/Core/cmsis_gcc.h **** {
 313:driver/Core/cmsis_gcc.h ****   uint32_t result;
 314:driver/Core/cmsis_gcc.h **** 
 315:driver/Core/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:driver/Core/cmsis_gcc.h ****   return result;
 317:driver/Core/cmsis_gcc.h **** }
 318:driver/Core/cmsis_gcc.h **** 
 319:driver/Core/cmsis_gcc.h **** 
 320:driver/Core/cmsis_gcc.h **** /**
 321:driver/Core/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:driver/Core/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 325:driver/Core/cmsis_gcc.h ****  */
 326:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:driver/Core/cmsis_gcc.h **** {
 328:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:driver/Core/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:driver/Core/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccZYixRy.s 			page 11


 331:driver/Core/cmsis_gcc.h ****   int16_t result;
 332:driver/Core/cmsis_gcc.h **** 
 333:driver/Core/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:driver/Core/cmsis_gcc.h ****   return result;
 335:driver/Core/cmsis_gcc.h **** #endif
 336:driver/Core/cmsis_gcc.h **** }
 337:driver/Core/cmsis_gcc.h **** 
 338:driver/Core/cmsis_gcc.h **** 
 339:driver/Core/cmsis_gcc.h **** /**
 340:driver/Core/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:driver/Core/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:driver/Core/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:driver/Core/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:driver/Core/cmsis_gcc.h ****   \return               Rotated value
 345:driver/Core/cmsis_gcc.h ****  */
 346:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:driver/Core/cmsis_gcc.h **** {
 348:driver/Core/cmsis_gcc.h ****   op2 %= 32U;
 349:driver/Core/cmsis_gcc.h ****   if (op2 == 0U)
 350:driver/Core/cmsis_gcc.h ****   {
 351:driver/Core/cmsis_gcc.h ****     return op1;
 352:driver/Core/cmsis_gcc.h ****   }
 353:driver/Core/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:driver/Core/cmsis_gcc.h **** }
 355:driver/Core/cmsis_gcc.h **** 
 356:driver/Core/cmsis_gcc.h **** 
 357:driver/Core/cmsis_gcc.h **** /**
 358:driver/Core/cmsis_gcc.h ****   \brief   Breakpoint
 359:driver/Core/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:driver/Core/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:driver/Core/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:driver/Core/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:driver/Core/cmsis_gcc.h ****  */
 364:driver/Core/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:driver/Core/cmsis_gcc.h **** 
 366:driver/Core/cmsis_gcc.h **** 
 367:driver/Core/cmsis_gcc.h **** /**
 368:driver/Core/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:driver/Core/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 372:driver/Core/cmsis_gcc.h ****  */
 373:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:driver/Core/cmsis_gcc.h **** {
 375:driver/Core/cmsis_gcc.h ****   uint32_t result;
 376:driver/Core/cmsis_gcc.h **** 
 377:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:driver/Core/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:driver/Core/cmsis_gcc.h **** #else
 382:driver/Core/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:driver/Core/cmsis_gcc.h **** 
 384:driver/Core/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:driver/Core/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:driver/Core/cmsis_gcc.h ****   {
 387:driver/Core/cmsis_gcc.h ****     result <<= 1U;
ARM GAS  /tmp/ccZYixRy.s 			page 12


 388:driver/Core/cmsis_gcc.h ****     result |= value & 1U;
 389:driver/Core/cmsis_gcc.h ****     s--;
 390:driver/Core/cmsis_gcc.h ****   }
 391:driver/Core/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:driver/Core/cmsis_gcc.h **** #endif
 393:driver/Core/cmsis_gcc.h ****   return result;
 394:driver/Core/cmsis_gcc.h **** }
 395:driver/Core/cmsis_gcc.h **** 
 396:driver/Core/cmsis_gcc.h **** 
 397:driver/Core/cmsis_gcc.h **** /**
 398:driver/Core/cmsis_gcc.h ****   \brief   Count leading zeros
 399:driver/Core/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:driver/Core/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:driver/Core/cmsis_gcc.h ****  */
 403:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:driver/Core/cmsis_gcc.h **** {
 405:driver/Core/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:driver/Core/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:driver/Core/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:driver/Core/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:driver/Core/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:driver/Core/cmsis_gcc.h ****      is non-zero".
 411:driver/Core/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:driver/Core/cmsis_gcc.h ****      single CLZ instruction.
 413:driver/Core/cmsis_gcc.h ****    */
 414:driver/Core/cmsis_gcc.h ****   if (value == 0U)
 415:driver/Core/cmsis_gcc.h ****   {
 416:driver/Core/cmsis_gcc.h ****     return 32U;
 417:driver/Core/cmsis_gcc.h ****   }
 418:driver/Core/cmsis_gcc.h ****   return __builtin_clz(value);
 419:driver/Core/cmsis_gcc.h **** }
 420:driver/Core/cmsis_gcc.h **** 
 421:driver/Core/cmsis_gcc.h **** 
 422:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:driver/Core/cmsis_gcc.h **** /**
 427:driver/Core/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:driver/Core/cmsis_gcc.h ****  */
 432:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:driver/Core/cmsis_gcc.h **** {
 434:driver/Core/cmsis_gcc.h ****     uint32_t result;
 435:driver/Core/cmsis_gcc.h **** 
 436:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:driver/Core/cmsis_gcc.h **** #else
 439:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:driver/Core/cmsis_gcc.h ****     */
 442:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:driver/Core/cmsis_gcc.h **** #endif
 444:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
ARM GAS  /tmp/ccZYixRy.s 			page 13


 445:driver/Core/cmsis_gcc.h **** }
 446:driver/Core/cmsis_gcc.h **** 
 447:driver/Core/cmsis_gcc.h **** 
 448:driver/Core/cmsis_gcc.h **** /**
 449:driver/Core/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:driver/Core/cmsis_gcc.h ****  */
 454:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:driver/Core/cmsis_gcc.h **** {
 456:driver/Core/cmsis_gcc.h ****     uint32_t result;
 457:driver/Core/cmsis_gcc.h **** 
 458:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:driver/Core/cmsis_gcc.h **** #else
 461:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:driver/Core/cmsis_gcc.h ****     */
 464:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:driver/Core/cmsis_gcc.h **** #endif
 466:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:driver/Core/cmsis_gcc.h **** }
 468:driver/Core/cmsis_gcc.h **** 
 469:driver/Core/cmsis_gcc.h **** 
 470:driver/Core/cmsis_gcc.h **** /**
 471:driver/Core/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:driver/Core/cmsis_gcc.h ****  */
 476:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:driver/Core/cmsis_gcc.h **** {
 478:driver/Core/cmsis_gcc.h ****     uint32_t result;
 479:driver/Core/cmsis_gcc.h **** 
 480:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:driver/Core/cmsis_gcc.h ****    return(result);
 482:driver/Core/cmsis_gcc.h **** }
 483:driver/Core/cmsis_gcc.h **** 
 484:driver/Core/cmsis_gcc.h **** 
 485:driver/Core/cmsis_gcc.h **** /**
 486:driver/Core/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 491:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 492:driver/Core/cmsis_gcc.h ****  */
 493:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:driver/Core/cmsis_gcc.h **** {
 495:driver/Core/cmsis_gcc.h ****    uint32_t result;
 496:driver/Core/cmsis_gcc.h **** 
 497:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:driver/Core/cmsis_gcc.h ****    return(result);
 499:driver/Core/cmsis_gcc.h **** }
 500:driver/Core/cmsis_gcc.h **** 
 501:driver/Core/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZYixRy.s 			page 14


 502:driver/Core/cmsis_gcc.h **** /**
 503:driver/Core/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 508:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 509:driver/Core/cmsis_gcc.h ****  */
 510:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:driver/Core/cmsis_gcc.h **** {
 512:driver/Core/cmsis_gcc.h ****    uint32_t result;
 513:driver/Core/cmsis_gcc.h **** 
 514:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:driver/Core/cmsis_gcc.h ****    return(result);
 516:driver/Core/cmsis_gcc.h **** }
 517:driver/Core/cmsis_gcc.h **** 
 518:driver/Core/cmsis_gcc.h **** 
 519:driver/Core/cmsis_gcc.h **** /**
 520:driver/Core/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 525:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 526:driver/Core/cmsis_gcc.h ****  */
 527:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:driver/Core/cmsis_gcc.h **** {
 529:driver/Core/cmsis_gcc.h ****    uint32_t result;
 530:driver/Core/cmsis_gcc.h **** 
 531:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:driver/Core/cmsis_gcc.h ****    return(result);
 533:driver/Core/cmsis_gcc.h **** }
 534:driver/Core/cmsis_gcc.h **** 
 535:driver/Core/cmsis_gcc.h **** 
 536:driver/Core/cmsis_gcc.h **** /**
 537:driver/Core/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:driver/Core/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:driver/Core/cmsis_gcc.h ****  */
 540:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:driver/Core/cmsis_gcc.h **** {
 542:driver/Core/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:driver/Core/cmsis_gcc.h **** }
 544:driver/Core/cmsis_gcc.h **** 
 545:driver/Core/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:driver/Core/cmsis_gcc.h **** 
 550:driver/Core/cmsis_gcc.h **** 
 551:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:driver/Core/cmsis_gcc.h **** /**
 555:driver/Core/cmsis_gcc.h ****   \brief   Signed Saturate
 556:driver/Core/cmsis_gcc.h ****   \details Saturates a signed value.
 557:driver/Core/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:driver/Core/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
ARM GAS  /tmp/ccZYixRy.s 			page 15


 559:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 560:driver/Core/cmsis_gcc.h ****  */
 561:driver/Core/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:driver/Core/cmsis_gcc.h **** __extension__ \
 563:driver/Core/cmsis_gcc.h **** ({                          \
 564:driver/Core/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:driver/Core/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:driver/Core/cmsis_gcc.h ****   __RES; \
 567:driver/Core/cmsis_gcc.h ****  })
 568:driver/Core/cmsis_gcc.h **** 
 569:driver/Core/cmsis_gcc.h **** 
 570:driver/Core/cmsis_gcc.h **** /**
 571:driver/Core/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:driver/Core/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:driver/Core/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:driver/Core/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 576:driver/Core/cmsis_gcc.h ****  */
 577:driver/Core/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:driver/Core/cmsis_gcc.h **** __extension__ \
 579:driver/Core/cmsis_gcc.h **** ({                          \
 580:driver/Core/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:driver/Core/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:driver/Core/cmsis_gcc.h ****   __RES; \
 583:driver/Core/cmsis_gcc.h ****  })
 584:driver/Core/cmsis_gcc.h **** 
 585:driver/Core/cmsis_gcc.h **** 
 586:driver/Core/cmsis_gcc.h **** /**
 587:driver/Core/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:driver/Core/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:driver/Core/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:driver/Core/cmsis_gcc.h ****   \return               Rotated value
 592:driver/Core/cmsis_gcc.h ****  */
 593:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:driver/Core/cmsis_gcc.h **** {
 595:driver/Core/cmsis_gcc.h ****   uint32_t result;
 596:driver/Core/cmsis_gcc.h **** 
 597:driver/Core/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:driver/Core/cmsis_gcc.h ****   return(result);
 599:driver/Core/cmsis_gcc.h **** }
 600:driver/Core/cmsis_gcc.h **** 
 601:driver/Core/cmsis_gcc.h **** 
 602:driver/Core/cmsis_gcc.h **** /**
 603:driver/Core/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:driver/Core/cmsis_gcc.h ****  */
 608:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:driver/Core/cmsis_gcc.h **** {
 610:driver/Core/cmsis_gcc.h ****     uint32_t result;
 611:driver/Core/cmsis_gcc.h **** 
 612:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:driver/Core/cmsis_gcc.h **** #else
 615:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
ARM GAS  /tmp/ccZYixRy.s 			page 16


 616:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:driver/Core/cmsis_gcc.h ****     */
 618:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:driver/Core/cmsis_gcc.h **** #endif
 620:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:driver/Core/cmsis_gcc.h **** }
 622:driver/Core/cmsis_gcc.h **** 
 623:driver/Core/cmsis_gcc.h **** 
 624:driver/Core/cmsis_gcc.h **** /**
 625:driver/Core/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:driver/Core/cmsis_gcc.h ****  */
 630:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:driver/Core/cmsis_gcc.h **** {
 632:driver/Core/cmsis_gcc.h ****     uint32_t result;
 633:driver/Core/cmsis_gcc.h **** 
 634:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:driver/Core/cmsis_gcc.h **** #else
 637:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:driver/Core/cmsis_gcc.h ****     */
 640:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:driver/Core/cmsis_gcc.h **** #endif
 642:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:driver/Core/cmsis_gcc.h **** }
 644:driver/Core/cmsis_gcc.h **** 
 645:driver/Core/cmsis_gcc.h **** 
 646:driver/Core/cmsis_gcc.h **** /**
 647:driver/Core/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:driver/Core/cmsis_gcc.h ****  */
 652:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:driver/Core/cmsis_gcc.h **** {
 654:driver/Core/cmsis_gcc.h ****     uint32_t result;
 655:driver/Core/cmsis_gcc.h **** 
 656:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:driver/Core/cmsis_gcc.h ****    return(result);
 658:driver/Core/cmsis_gcc.h **** }
 659:driver/Core/cmsis_gcc.h **** 
 660:driver/Core/cmsis_gcc.h **** 
 661:driver/Core/cmsis_gcc.h **** /**
 662:driver/Core/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:driver/Core/cmsis_gcc.h ****  */
 667:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:driver/Core/cmsis_gcc.h **** {
 669:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:driver/Core/cmsis_gcc.h **** }
 671:driver/Core/cmsis_gcc.h **** 
 672:driver/Core/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZYixRy.s 			page 17


 673:driver/Core/cmsis_gcc.h **** /**
 674:driver/Core/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:driver/Core/cmsis_gcc.h ****  */
 679:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:driver/Core/cmsis_gcc.h **** {
 681:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:driver/Core/cmsis_gcc.h **** }
 683:driver/Core/cmsis_gcc.h **** 
 684:driver/Core/cmsis_gcc.h **** 
 685:driver/Core/cmsis_gcc.h **** /**
 686:driver/Core/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:driver/Core/cmsis_gcc.h ****  */
 691:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:driver/Core/cmsis_gcc.h **** {
 693:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:driver/Core/cmsis_gcc.h **** }
 695:driver/Core/cmsis_gcc.h **** 
 696:driver/Core/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:driver/Core/cmsis_gcc.h **** 
 700:driver/Core/cmsis_gcc.h **** /**
 701:driver/Core/cmsis_gcc.h ****   \brief   Signed Saturate
 702:driver/Core/cmsis_gcc.h ****   \details Saturates a signed value.
 703:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:driver/Core/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 706:driver/Core/cmsis_gcc.h ****  */
 707:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:driver/Core/cmsis_gcc.h **** {
 709:driver/Core/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:driver/Core/cmsis_gcc.h ****   {
 711:driver/Core/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:driver/Core/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:driver/Core/cmsis_gcc.h ****     if (val > max)
 714:driver/Core/cmsis_gcc.h ****     {
 715:driver/Core/cmsis_gcc.h ****       return max;
 716:driver/Core/cmsis_gcc.h ****     }
 717:driver/Core/cmsis_gcc.h ****     else if (val < min)
 718:driver/Core/cmsis_gcc.h ****     {
 719:driver/Core/cmsis_gcc.h ****       return min;
 720:driver/Core/cmsis_gcc.h ****     }
 721:driver/Core/cmsis_gcc.h ****   }
 722:driver/Core/cmsis_gcc.h ****   return val;
 723:driver/Core/cmsis_gcc.h **** }
 724:driver/Core/cmsis_gcc.h **** 
 725:driver/Core/cmsis_gcc.h **** /**
 726:driver/Core/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:driver/Core/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:driver/Core/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
ARM GAS  /tmp/ccZYixRy.s 			page 18


 730:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 731:driver/Core/cmsis_gcc.h ****  */
 732:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:driver/Core/cmsis_gcc.h **** {
 734:driver/Core/cmsis_gcc.h ****   if (sat <= 31U)
 735:driver/Core/cmsis_gcc.h ****   {
 736:driver/Core/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:driver/Core/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:driver/Core/cmsis_gcc.h ****     {
 739:driver/Core/cmsis_gcc.h ****       return max;
 740:driver/Core/cmsis_gcc.h ****     }
 741:driver/Core/cmsis_gcc.h ****     else if (val < 0)
 742:driver/Core/cmsis_gcc.h ****     {
 743:driver/Core/cmsis_gcc.h ****       return 0U;
 744:driver/Core/cmsis_gcc.h ****     }
 745:driver/Core/cmsis_gcc.h ****   }
 746:driver/Core/cmsis_gcc.h ****   return (uint32_t)val;
 747:driver/Core/cmsis_gcc.h **** }
 748:driver/Core/cmsis_gcc.h **** 
 749:driver/Core/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:driver/Core/cmsis_gcc.h **** 
 753:driver/Core/cmsis_gcc.h **** 
 754:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:driver/Core/cmsis_gcc.h **** /**
 757:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:driver/Core/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:driver/Core/cmsis_gcc.h ****  */
 762:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:driver/Core/cmsis_gcc.h **** {
 764:driver/Core/cmsis_gcc.h ****     uint32_t result;
 765:driver/Core/cmsis_gcc.h **** 
 766:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);
 768:driver/Core/cmsis_gcc.h **** }
 769:driver/Core/cmsis_gcc.h **** 
 770:driver/Core/cmsis_gcc.h **** 
 771:driver/Core/cmsis_gcc.h **** /**
 772:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:driver/Core/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:driver/Core/cmsis_gcc.h ****  */
 777:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:driver/Core/cmsis_gcc.h **** {
 779:driver/Core/cmsis_gcc.h ****     uint32_t result;
 780:driver/Core/cmsis_gcc.h **** 
 781:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);
 783:driver/Core/cmsis_gcc.h **** }
 784:driver/Core/cmsis_gcc.h **** 
 785:driver/Core/cmsis_gcc.h **** 
 786:driver/Core/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccZYixRy.s 			page 19


 787:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:driver/Core/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:driver/Core/cmsis_gcc.h ****  */
 792:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:driver/Core/cmsis_gcc.h **** {
 794:driver/Core/cmsis_gcc.h ****     uint32_t result;
 795:driver/Core/cmsis_gcc.h **** 
 796:driver/Core/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:driver/Core/cmsis_gcc.h ****    return(result);
 798:driver/Core/cmsis_gcc.h **** }
 799:driver/Core/cmsis_gcc.h **** 
 800:driver/Core/cmsis_gcc.h **** 
 801:driver/Core/cmsis_gcc.h **** /**
 802:driver/Core/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:driver/Core/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:driver/Core/cmsis_gcc.h ****  */
 807:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:driver/Core/cmsis_gcc.h **** {
 809:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:driver/Core/cmsis_gcc.h **** }
 811:driver/Core/cmsis_gcc.h **** 
 812:driver/Core/cmsis_gcc.h **** 
 813:driver/Core/cmsis_gcc.h **** /**
 814:driver/Core/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:driver/Core/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:driver/Core/cmsis_gcc.h ****  */
 819:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:driver/Core/cmsis_gcc.h **** {
 821:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:driver/Core/cmsis_gcc.h **** }
 823:driver/Core/cmsis_gcc.h **** 
 824:driver/Core/cmsis_gcc.h **** 
 825:driver/Core/cmsis_gcc.h **** /**
 826:driver/Core/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:driver/Core/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:driver/Core/cmsis_gcc.h ****  */
 831:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:driver/Core/cmsis_gcc.h **** {
 833:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:driver/Core/cmsis_gcc.h **** }
 835:driver/Core/cmsis_gcc.h **** 
 836:driver/Core/cmsis_gcc.h **** 
 837:driver/Core/cmsis_gcc.h **** /**
 838:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:driver/Core/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:driver/Core/cmsis_gcc.h ****  */
 843:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
ARM GAS  /tmp/ccZYixRy.s 			page 20


 844:driver/Core/cmsis_gcc.h **** {
 845:driver/Core/cmsis_gcc.h ****     uint32_t result;
 846:driver/Core/cmsis_gcc.h **** 
 847:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);
 849:driver/Core/cmsis_gcc.h **** }
 850:driver/Core/cmsis_gcc.h **** 
 851:driver/Core/cmsis_gcc.h **** 
 852:driver/Core/cmsis_gcc.h **** /**
 853:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:driver/Core/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:driver/Core/cmsis_gcc.h ****  */
 858:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:driver/Core/cmsis_gcc.h **** {
 860:driver/Core/cmsis_gcc.h ****     uint32_t result;
 861:driver/Core/cmsis_gcc.h **** 
 862:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);
 864:driver/Core/cmsis_gcc.h **** }
 865:driver/Core/cmsis_gcc.h **** 
 866:driver/Core/cmsis_gcc.h **** 
 867:driver/Core/cmsis_gcc.h **** /**
 868:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:driver/Core/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:driver/Core/cmsis_gcc.h ****  */
 873:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:driver/Core/cmsis_gcc.h **** {
 875:driver/Core/cmsis_gcc.h ****     uint32_t result;
 876:driver/Core/cmsis_gcc.h **** 
 877:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:driver/Core/cmsis_gcc.h ****    return(result);
 879:driver/Core/cmsis_gcc.h **** }
 880:driver/Core/cmsis_gcc.h **** 
 881:driver/Core/cmsis_gcc.h **** 
 882:driver/Core/cmsis_gcc.h **** /**
 883:driver/Core/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:driver/Core/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 888:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 889:driver/Core/cmsis_gcc.h ****  */
 890:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:driver/Core/cmsis_gcc.h **** {
 892:driver/Core/cmsis_gcc.h ****    uint32_t result;
 893:driver/Core/cmsis_gcc.h **** 
 894:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:driver/Core/cmsis_gcc.h ****    return(result);
 896:driver/Core/cmsis_gcc.h **** }
 897:driver/Core/cmsis_gcc.h **** 
 898:driver/Core/cmsis_gcc.h **** 
 899:driver/Core/cmsis_gcc.h **** /**
 900:driver/Core/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
ARM GAS  /tmp/ccZYixRy.s 			page 21


 901:driver/Core/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 905:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 906:driver/Core/cmsis_gcc.h ****  */
 907:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:driver/Core/cmsis_gcc.h **** {
 909:driver/Core/cmsis_gcc.h ****    uint32_t result;
 910:driver/Core/cmsis_gcc.h **** 
 911:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:driver/Core/cmsis_gcc.h ****    return(result);
 913:driver/Core/cmsis_gcc.h **** }
 914:driver/Core/cmsis_gcc.h **** 
 915:driver/Core/cmsis_gcc.h **** 
 916:driver/Core/cmsis_gcc.h **** /**
 917:driver/Core/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:driver/Core/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 922:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 923:driver/Core/cmsis_gcc.h ****  */
 924:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:driver/Core/cmsis_gcc.h **** {
 926:driver/Core/cmsis_gcc.h ****    uint32_t result;
 927:driver/Core/cmsis_gcc.h **** 
 928:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:driver/Core/cmsis_gcc.h ****    return(result);
 930:driver/Core/cmsis_gcc.h **** }
 931:driver/Core/cmsis_gcc.h **** 
 932:driver/Core/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:driver/Core/cmsis_gcc.h **** 
 935:driver/Core/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:driver/Core/cmsis_gcc.h **** 
 937:driver/Core/cmsis_gcc.h **** 
 938:driver/Core/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:driver/Core/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:driver/Core/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:driver/Core/cmsis_gcc.h ****   @{
 942:driver/Core/cmsis_gcc.h ****  */
 943:driver/Core/cmsis_gcc.h **** 
 944:driver/Core/cmsis_gcc.h **** /**
 945:driver/Core/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:driver/Core/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:driver/Core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:driver/Core/cmsis_gcc.h ****  */
 949:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:driver/Core/cmsis_gcc.h **** {
 951:driver/Core/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:driver/Core/cmsis_gcc.h **** }
 953:driver/Core/cmsis_gcc.h **** 
 954:driver/Core/cmsis_gcc.h **** 
 955:driver/Core/cmsis_gcc.h **** /**
 956:driver/Core/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:driver/Core/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
ARM GAS  /tmp/ccZYixRy.s 			page 22


 958:driver/Core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:driver/Core/cmsis_gcc.h ****  */
 960:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 191              		.loc 2 960 27 view .LVU41
 192              	.LBB15:
 961:driver/Core/cmsis_gcc.h **** {
 962:driver/Core/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 193              		.loc 2 962 3 view .LVU42
 194              		.syntax unified
 195              	@ 962 "driver/Core/cmsis_gcc.h" 1
 196 0004 72B6     		cpsid i
 197              	@ 0 "" 2
 198              		.thumb
 199              		.syntax unified
 200              	.LBE15:
 201              	.LBE14:
  45:src/mutex.c   **** 
  46:src/mutex.c   ****     TCB_Typedef* current_task = getCurrentTask();
 202              		.loc 1 46 5 view .LVU43
 203              		.loc 1 46 33 is_stmt 0 view .LVU44
 204 0006 FFF7FEFF 		bl	getCurrentTask
 205              	.LVL15:
 206              		.loc 1 46 33 view .LVU45
 207 000a 0446     		mov	r4, r0
 208              	.LVL16:
  47:src/mutex.c   ****     
  48:src/mutex.c   ****     if (!(mutex->lock))
 209              		.loc 1 48 5 is_stmt 1 view .LVU46
 210              		.loc 1 48 16 is_stmt 0 view .LVU47
 211 000c 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 212              		.loc 1 48 8 view .LVU48
 213 000e 6BB1     		cbz	r3, .L14
  49:src/mutex.c   ****     {
  50:src/mutex.c   ****         Log_s("Lock aquired task:");
  51:src/mutex.c   ****         Log_s(current_task->taskName);
  52:src/mutex.c   ****         mutex->lock = 1;
  53:src/mutex.c   ****         mutex->owner = current_task;
  54:src/mutex.c   ****         return;
  55:src/mutex.c   ****     }
  56:src/mutex.c   ****     else
  57:src/mutex.c   ****     {
  58:src/mutex.c   ****         current_task->task_state = BLOCKED;
 214              		.loc 1 58 9 is_stmt 1 view .LVU49
 215              		.loc 1 58 34 is_stmt 0 view .LVU50
 216 0010 0223     		movs	r3, #2
 217 0012 0382     		strh	r3, [r0, #16]	@ movhi
  59:src/mutex.c   ****         pushWaitingQueue(&(mutex->waiting_task), current_task);
 218              		.loc 1 59 9 is_stmt 1 view .LVU51
 219 0014 0146     		mov	r1, r0
 220 0016 281D     		adds	r0, r5, #4
 221              	.LVL17:
 222              		.loc 1 59 9 is_stmt 0 view .LVU52
 223 0018 FFF7FEFF 		bl	pushWaitingQueue
 224              	.LVL18:
  60:src/mutex.c   ****         Log_s("Pushed task in waiting queue:");
 225              		.loc 1 60 9 is_stmt 1 view .LVU53
 226 001c 0848     		ldr	r0, .L15
ARM GAS  /tmp/ccZYixRy.s 			page 23


 227 001e FFF7FEFF 		bl	Log_s
 228              	.LVL19:
  61:src/mutex.c   ****         Log_s(current_task->taskName);
 229              		.loc 1 61 9 view .LVU54
 230 0022 A068     		ldr	r0, [r4, #8]
 231 0024 FFF7FEFF 		bl	Log_s
 232              	.LVL20:
  62:src/mutex.c   ****     }
  63:src/mutex.c   **** 
  64:src/mutex.c   ****     __enable_irq();
 233              		.loc 1 64 5 view .LVU55
 234              	.LBB16:
 235              	.LBI16:
 949:driver/Core/cmsis_gcc.h **** {
 236              		.loc 2 949 27 view .LVU56
 237              	.LBB17:
 951:driver/Core/cmsis_gcc.h **** }
 238              		.loc 2 951 3 view .LVU57
 239              		.syntax unified
 240              	@ 951 "driver/Core/cmsis_gcc.h" 1
 241 0028 62B6     		cpsie i
 242              	@ 0 "" 2
 243              		.thumb
 244              		.syntax unified
 245              	.L10:
 246              	.LBE17:
 247              	.LBE16:
  65:src/mutex.c   **** }
 248              		.loc 1 65 1 is_stmt 0 view .LVU58
 249 002a 38BD     		pop	{r3, r4, r5, pc}
 250              	.LVL21:
 251              	.L14:
  50:src/mutex.c   ****         Log_s(current_task->taskName);
 252              		.loc 1 50 9 is_stmt 1 view .LVU59
 253 002c 0548     		ldr	r0, .L15+4
 254              	.LVL22:
  50:src/mutex.c   ****         Log_s(current_task->taskName);
 255              		.loc 1 50 9 is_stmt 0 view .LVU60
 256 002e FFF7FEFF 		bl	Log_s
 257              	.LVL23:
  51:src/mutex.c   ****         mutex->lock = 1;
 258              		.loc 1 51 9 is_stmt 1 view .LVU61
 259 0032 A068     		ldr	r0, [r4, #8]
 260 0034 FFF7FEFF 		bl	Log_s
 261              	.LVL24:
  52:src/mutex.c   ****         mutex->owner = current_task;
 262              		.loc 1 52 9 view .LVU62
  52:src/mutex.c   ****         mutex->owner = current_task;
 263              		.loc 1 52 21 is_stmt 0 view .LVU63
 264 0038 0123     		movs	r3, #1
 265 003a 2B72     		strb	r3, [r5, #8]
  53:src/mutex.c   ****         return;
 266              		.loc 1 53 9 is_stmt 1 view .LVU64
  53:src/mutex.c   ****         return;
 267              		.loc 1 53 22 is_stmt 0 view .LVU65
 268 003c 2C60     		str	r4, [r5]
  54:src/mutex.c   ****     }
ARM GAS  /tmp/ccZYixRy.s 			page 24


 269              		.loc 1 54 9 is_stmt 1 view .LVU66
 270 003e F4E7     		b	.L10
 271              	.L16:
 272              		.align	2
 273              	.L15:
 274 0040 14000000 		.word	.LC1
 275 0044 00000000 		.word	.LC0
 276              		.cfi_endproc
 277              	.LFE139:
 279              		.section	.rodata.MutexGive.str1.4,"aMS",%progbits,1
 280              		.align	2
 281              	.LC2:
 282 0000 596F7520 		.ascii	"You have reached the end\000"
 282      68617665 
 282      20726561 
 282      63686564 
 282      20746865 
 283 0019 000000   		.align	2
 284              	.LC3:
 285 001c 506F7065 		.ascii	"Poped task from waiting queue:\000"
 285      64207461 
 285      736B2066 
 285      726F6D20 
 285      77616974 
 286              		.section	.text.MutexGive,"ax",%progbits
 287              		.align	1
 288              		.global	MutexGive
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv4-sp-d16
 294              	MutexGive:
 295              	.LVL25:
 296              	.LFB140:
  66:src/mutex.c   **** 
  67:src/mutex.c   **** void MutexGive(Mutex_Typedef* mutex)
  68:src/mutex.c   **** {
 297              		.loc 1 68 1 view -0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 301              		.loc 1 68 1 is_stmt 0 view .LVU68
 302 0000 38B5     		push	{r3, r4, r5, lr}
 303              	.LCFI3:
 304              		.cfi_def_cfa_offset 16
 305              		.cfi_offset 3, -16
 306              		.cfi_offset 4, -12
 307              		.cfi_offset 5, -8
 308              		.cfi_offset 14, -4
 309 0002 0446     		mov	r4, r0
  69:src/mutex.c   ****     __disable_irq();
 310              		.loc 1 69 5 is_stmt 1 view .LVU69
 311              	.LBB18:
 312              	.LBI18:
 960:driver/Core/cmsis_gcc.h **** {
 313              		.loc 2 960 27 view .LVU70
 314              	.LBB19:
ARM GAS  /tmp/ccZYixRy.s 			page 25


 315              		.loc 2 962 3 view .LVU71
 316              		.syntax unified
 317              	@ 962 "driver/Core/cmsis_gcc.h" 1
 318 0004 72B6     		cpsid i
 319              	@ 0 "" 2
 320              		.thumb
 321              		.syntax unified
 322              	.LBE19:
 323              	.LBE18:
  70:src/mutex.c   **** 
  71:src/mutex.c   ****     TCB_Typedef* current_task = getCurrentTask();
 324              		.loc 1 71 5 view .LVU72
 325              		.loc 1 71 33 is_stmt 0 view .LVU73
 326 0006 FFF7FEFF 		bl	getCurrentTask
 327              	.LVL26:
  72:src/mutex.c   ****     
  73:src/mutex.c   ****     if (mutex->owner != current_task)
 328              		.loc 1 73 5 is_stmt 1 view .LVU74
 329              		.loc 1 73 14 is_stmt 0 view .LVU75
 330 000a 2368     		ldr	r3, [r4]
 331              		.loc 1 73 8 view .LVU76
 332 000c 8342     		cmp	r3, r0
 333 000e 01D0     		beq	.L18
  74:src/mutex.c   ****     {
  75:src/mutex.c   ****         __enable_irq();
 334              		.loc 1 75 9 is_stmt 1 view .LVU77
 335              	.LBB20:
 336              	.LBI20:
 949:driver/Core/cmsis_gcc.h **** {
 337              		.loc 2 949 27 view .LVU78
 338              	.LBB21:
 951:driver/Core/cmsis_gcc.h **** }
 339              		.loc 2 951 3 view .LVU79
 340              		.syntax unified
 341              	@ 951 "driver/Core/cmsis_gcc.h" 1
 342 0010 62B6     		cpsie i
 343              	@ 0 "" 2
 344              		.thumb
 345              		.syntax unified
 346              	.LBE21:
 347              	.LBE20:
  76:src/mutex.c   ****         return;
 348              		.loc 1 76 9 view .LVU80
 349              	.LVL27:
 350              	.L17:
  77:src/mutex.c   ****     }
  78:src/mutex.c   **** 
  79:src/mutex.c   ****     if (mutex->waiting_task == NULL)
  80:src/mutex.c   ****     {
  81:src/mutex.c   ****         Log_s("You have reached the end");
  82:src/mutex.c   ****         mutex->lock = 0;
  83:src/mutex.c   ****         mutex->owner = NULL;
  84:src/mutex.c   ****     }
  85:src/mutex.c   ****     else
  86:src/mutex.c   ****     {
  87:src/mutex.c   ****         TCB_Typedef* next_task = popWaitingQueue(&(mutex->waiting_task));
  88:src/mutex.c   ****         if (next_task != NULL)
ARM GAS  /tmp/ccZYixRy.s 			page 26


  89:src/mutex.c   ****         {
  90:src/mutex.c   ****             next_task->task_state = READY;
  91:src/mutex.c   ****             mutex->owner = next_task;
  92:src/mutex.c   ****             Log_s("Poped task from waiting queue:");
  93:src/mutex.c   ****             Log_s(next_task->taskName);
  94:src/mutex.c   ****             Log_i(next_task->task_state);
  95:src/mutex.c   ****         }
  96:src/mutex.c   ****     }
  97:src/mutex.c   ****     
  98:src/mutex.c   ****     __enable_irq();
  99:src/mutex.c   **** }
 351              		.loc 1 99 1 is_stmt 0 view .LVU81
 352 0012 38BD     		pop	{r3, r4, r5, pc}
 353              	.LVL28:
 354              	.L18:
  79:src/mutex.c   ****     {
 355              		.loc 1 79 5 is_stmt 1 view .LVU82
  79:src/mutex.c   ****     {
 356              		.loc 1 79 14 is_stmt 0 view .LVU83
 357 0014 6368     		ldr	r3, [r4, #4]
  79:src/mutex.c   ****     {
 358              		.loc 1 79 8 view .LVU84
 359 0016 93B1     		cbz	r3, .L23
 360              	.LBB22:
  87:src/mutex.c   ****         if (next_task != NULL)
 361              		.loc 1 87 9 is_stmt 1 view .LVU85
  87:src/mutex.c   ****         if (next_task != NULL)
 362              		.loc 1 87 34 is_stmt 0 view .LVU86
 363 0018 201D     		adds	r0, r4, #4
 364              	.LVL29:
  87:src/mutex.c   ****         if (next_task != NULL)
 365              		.loc 1 87 34 view .LVU87
 366 001a FFF7FEFF 		bl	popWaitingQueue
 367              	.LVL30:
  88:src/mutex.c   ****         {
 368              		.loc 1 88 9 is_stmt 1 view .LVU88
  88:src/mutex.c   ****         {
 369              		.loc 1 88 12 is_stmt 0 view .LVU89
 370 001e 0546     		mov	r5, r0
 371 0020 58B1     		cbz	r0, .L21
  90:src/mutex.c   ****             mutex->owner = next_task;
 372              		.loc 1 90 13 is_stmt 1 view .LVU90
  90:src/mutex.c   ****             mutex->owner = next_task;
 373              		.loc 1 90 35 is_stmt 0 view .LVU91
 374 0022 0023     		movs	r3, #0
 375 0024 0382     		strh	r3, [r0, #16]	@ movhi
  91:src/mutex.c   ****             Log_s("Poped task from waiting queue:");
 376              		.loc 1 91 13 is_stmt 1 view .LVU92
  91:src/mutex.c   ****             Log_s("Poped task from waiting queue:");
 377              		.loc 1 91 26 is_stmt 0 view .LVU93
 378 0026 2060     		str	r0, [r4]
  92:src/mutex.c   ****             Log_s(next_task->taskName);
 379              		.loc 1 92 13 is_stmt 1 view .LVU94
 380 0028 0848     		ldr	r0, .L24
 381              	.LVL31:
  92:src/mutex.c   ****             Log_s(next_task->taskName);
 382              		.loc 1 92 13 is_stmt 0 view .LVU95
ARM GAS  /tmp/ccZYixRy.s 			page 27


 383 002a FFF7FEFF 		bl	Log_s
 384              	.LVL32:
  93:src/mutex.c   ****             Log_i(next_task->task_state);
 385              		.loc 1 93 13 is_stmt 1 view .LVU96
 386 002e A868     		ldr	r0, [r5, #8]
 387 0030 FFF7FEFF 		bl	Log_s
 388              	.LVL33:
  94:src/mutex.c   ****         }
 389              		.loc 1 94 13 view .LVU97
 390 0034 288A     		ldrh	r0, [r5, #16]
 391 0036 FFF7FEFF 		bl	Log_i
 392              	.LVL34:
 393              	.L21:
  94:src/mutex.c   ****         }
 394              		.loc 1 94 13 is_stmt 0 view .LVU98
 395              	.LBE22:
  98:src/mutex.c   **** }
 396              		.loc 1 98 5 is_stmt 1 view .LVU99
 397              	.LBB23:
 398              	.LBI23:
 949:driver/Core/cmsis_gcc.h **** {
 399              		.loc 2 949 27 view .LVU100
 400              	.LBB24:
 951:driver/Core/cmsis_gcc.h **** }
 401              		.loc 2 951 3 view .LVU101
 402              		.syntax unified
 403              	@ 951 "driver/Core/cmsis_gcc.h" 1
 404 003a 62B6     		cpsie i
 405              	@ 0 "" 2
 952:driver/Core/cmsis_gcc.h **** 
 406              		.loc 2 952 1 is_stmt 0 view .LVU102
 407              		.thumb
 408              		.syntax unified
 409 003c E9E7     		b	.L17
 410              	.LVL35:
 411              	.L23:
 952:driver/Core/cmsis_gcc.h **** 
 412              		.loc 2 952 1 view .LVU103
 413              	.LBE24:
 414              	.LBE23:
  81:src/mutex.c   ****         mutex->lock = 0;
 415              		.loc 1 81 9 is_stmt 1 view .LVU104
 416 003e 0448     		ldr	r0, .L24+4
 417              	.LVL36:
  81:src/mutex.c   ****         mutex->lock = 0;
 418              		.loc 1 81 9 is_stmt 0 view .LVU105
 419 0040 FFF7FEFF 		bl	Log_s
 420              	.LVL37:
  82:src/mutex.c   ****         mutex->owner = NULL;
 421              		.loc 1 82 9 is_stmt 1 view .LVU106
  82:src/mutex.c   ****         mutex->owner = NULL;
 422              		.loc 1 82 21 is_stmt 0 view .LVU107
 423 0044 0023     		movs	r3, #0
 424 0046 2372     		strb	r3, [r4, #8]
  83:src/mutex.c   ****     }
 425              		.loc 1 83 9 is_stmt 1 view .LVU108
  83:src/mutex.c   ****     }
ARM GAS  /tmp/ccZYixRy.s 			page 28


 426              		.loc 1 83 22 is_stmt 0 view .LVU109
 427 0048 2360     		str	r3, [r4]
 428 004a F6E7     		b	.L21
 429              	.L25:
 430              		.align	2
 431              	.L24:
 432 004c 1C000000 		.word	.LC3
 433 0050 00000000 		.word	.LC2
 434              		.cfi_endproc
 435              	.LFE140:
 437              		.section	.text.createMutex,"ax",%progbits
 438              		.align	1
 439              		.global	createMutex
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	createMutex:
 446              	.LFB141:
 100:src/mutex.c   **** 
 101:src/mutex.c   **** Mutex_Typedef* createMutex(void)
 102:src/mutex.c   **** {
 447              		.loc 1 102 1 is_stmt 1 view -0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451 0000 08B5     		push	{r3, lr}
 452              	.LCFI4:
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 3, -8
 455              		.cfi_offset 14, -4
 103:src/mutex.c   ****     Mutex_Typedef* newMutex = (Mutex_Typedef*)malloc(sizeof(Mutex_Typedef));
 456              		.loc 1 103 5 view .LVU111
 457              		.loc 1 103 47 is_stmt 0 view .LVU112
 458 0002 0C20     		movs	r0, #12
 459 0004 FFF7FEFF 		bl	malloc
 460              	.LVL38:
 104:src/mutex.c   ****     if (newMutex == NULL)
 461              		.loc 1 104 5 is_stmt 1 view .LVU113
 462              		.loc 1 104 8 is_stmt 0 view .LVU114
 463 0008 0346     		mov	r3, r0
 464 000a 18B1     		cbz	r0, .L26
 105:src/mutex.c   ****     {
 106:src/mutex.c   ****         return NULL;
 107:src/mutex.c   ****     }
 108:src/mutex.c   **** 
 109:src/mutex.c   ****     memset(newMutex, 0, sizeof(Mutex_Typedef));
 465              		.loc 1 109 5 is_stmt 1 view .LVU115
 466 000c 0022     		movs	r2, #0
 467 000e 0260     		str	r2, [r0]	@ unaligned
 468 0010 4260     		str	r2, [r0, #4]	@ unaligned
 469 0012 8260     		str	r2, [r0, #8]	@ unaligned
 110:src/mutex.c   **** 
 111:src/mutex.c   ****     return newMutex;
 470              		.loc 1 111 5 view .LVU116
 471              	.L26:
 112:src/mutex.c   **** }...
ARM GAS  /tmp/ccZYixRy.s 			page 29


 472              		.loc 1 112 1 is_stmt 0 view .LVU117
 473 0014 1846     		mov	r0, r3
 474              	.LVL39:
 475              		.loc 1 112 1 view .LVU118
 476 0016 08BD     		pop	{r3, pc}
 477              		.loc 1 112 1 view .LVU119
 478              		.cfi_endproc
 479              	.LFE141:
 481              		.text
 482              	.Letext0:
 483              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 484              		.file 4 "inc/task.h"
 485              		.file 5 "inc/mutex.h"
 486              		.file 6 "/usr/include/newlib/stdlib.h"
 487              		.file 7 "inc/Log.h"
ARM GAS  /tmp/ccZYixRy.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mutex.c
     /tmp/ccZYixRy.s:18     .text.pushWaitingQueue:0000000000000000 $t
     /tmp/ccZYixRy.s:26     .text.pushWaitingQueue:0000000000000000 pushWaitingQueue
     /tmp/ccZYixRy.s:103    .text.popWaitingQueue:0000000000000000 $t
     /tmp/ccZYixRy.s:110    .text.popWaitingQueue:0000000000000000 popWaitingQueue
     /tmp/ccZYixRy.s:157    .rodata.MutexTake.str1.4:0000000000000000 $d
     /tmp/ccZYixRy.s:164    .text.MutexTake:0000000000000000 $t
     /tmp/ccZYixRy.s:171    .text.MutexTake:0000000000000000 MutexTake
     /tmp/ccZYixRy.s:274    .text.MutexTake:0000000000000040 $d
     /tmp/ccZYixRy.s:280    .rodata.MutexGive.str1.4:0000000000000000 $d
     /tmp/ccZYixRy.s:287    .text.MutexGive:0000000000000000 $t
     /tmp/ccZYixRy.s:294    .text.MutexGive:0000000000000000 MutexGive
     /tmp/ccZYixRy.s:432    .text.MutexGive:000000000000004c $d
     /tmp/ccZYixRy.s:438    .text.createMutex:0000000000000000 $t
     /tmp/ccZYixRy.s:445    .text.createMutex:0000000000000000 createMutex

UNDEFINED SYMBOLS
malloc
free
getCurrentTask
Log_s
Log_i
