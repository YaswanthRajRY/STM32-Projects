ARM GAS  /tmp/ccmIpolH.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mutex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.pushWaitingQueue,"ax",%progbits
  18              		.align	1
  19              		.global	pushWaitingQueue
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	pushWaitingQueue:
  27              	.LVL0:
  28              	.LFB137:
  29              		.file 1 "src/mutex.c"
   1:src/mutex.c   **** #include "mutex.h"
   2:src/mutex.c   **** 
   3:src/mutex.c   **** extern TCB_Typedef* getCurrentTask(void);       // define in scheduler.c
   4:src/mutex.c   **** extern TCB_Typedef* idle_task;			// defined in task.c
   5:src/mutex.c   **** extern ready_task_list* ReadyHead;      // defined in task.c
   6:src/mutex.c   **** 
   7:src/mutex.c   **** /********************************* Function to add task in mutex waiting List *********************
   8:src/mutex.c   **** void pushWaitingQueue(mutexList** mutexListHead, TCB_Typedef* current_task)
   9:src/mutex.c   **** {
  30              		.loc 1 9 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 8
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 9 1 is_stmt 0 view .LVU1
  35 0000 10B5     		push	{r4, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
  39              		.cfi_offset 14, -4
  40 0002 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43 0004 0446     		mov	r4, r0
  44 0006 0191     		str	r1, [sp, #4]
  10:src/mutex.c   ****     removeFromReadyList(&current_task);         // remove from ready list
  45              		.loc 1 10 5 is_stmt 1 view .LVU2
  46 0008 01A8     		add	r0, sp, #4
  47              	.LVL1:
  48              		.loc 1 10 5 is_stmt 0 view .LVU3
ARM GAS  /tmp/ccmIpolH.s 			page 2


  49 000a FFF7FEFF 		bl	removeFromReadyList
  50              	.LVL2:
  11:src/mutex.c   **** 
  12:src/mutex.c   ****     if ((*mutexListHead)->head  == NULL)
  51              		.loc 1 12 5 is_stmt 1 view .LVU4
  52              		.loc 1 12 10 is_stmt 0 view .LVU5
  53 000e 2268     		ldr	r2, [r4]
  54              		.loc 1 12 25 view .LVU6
  55 0010 1368     		ldr	r3, [r2]
  56              		.loc 1 12 8 view .LVU7
  57 0012 3BB1     		cbz	r3, .L5
  58              	.L2:
  59              	.LVL3:
  60              	.LBB13:
  13:src/mutex.c   ****     {
  14:src/mutex.c   ****         (*mutexListHead)->head = current_task;          // first node if mutexHead is null
  15:src/mutex.c   ****     }
  16:src/mutex.c   ****     else
  17:src/mutex.c   ****     {
  18:src/mutex.c   ****         TCB_Typedef* temp = (*mutexListHead)->head;
  19:src/mutex.c   ****         while (temp->next != NULL)
  61              		.loc 1 19 15 is_stmt 1 view .LVU8
  62 0014 1A46     		mov	r2, r3
  63              		.loc 1 19 20 is_stmt 0 view .LVU9
  64 0016 1B68     		ldr	r3, [r3]
  65              	.LVL4:
  66              		.loc 1 19 15 view .LVU10
  67 0018 002B     		cmp	r3, #0
  68 001a FBD1     		bne	.L2
  20:src/mutex.c   ****         {
  21:src/mutex.c   ****             temp = temp->next;          // iterate to last node
  22:src/mutex.c   ****         }
  23:src/mutex.c   ****         temp->next = current_task;      // add new node in last
  69              		.loc 1 23 9 is_stmt 1 view .LVU11
  70              		.loc 1 23 20 is_stmt 0 view .LVU12
  71 001c 019B     		ldr	r3, [sp, #4]
  72 001e 1360     		str	r3, [r2]
  73              	.LVL5:
  74              	.L1:
  75              		.loc 1 23 20 view .LVU13
  76              	.LBE13:
  24:src/mutex.c   ****     }
  25:src/mutex.c   **** }
  77              		.loc 1 25 1 view .LVU14
  78 0020 02B0     		add	sp, sp, #8
  79              	.LCFI2:
  80              		.cfi_remember_state
  81              		.cfi_def_cfa_offset 8
  82              		@ sp needed
  83 0022 10BD     		pop	{r4, pc}
  84              	.LVL6:
  85              	.L5:
  86              	.LCFI3:
  87              		.cfi_restore_state
  14:src/mutex.c   ****     }
  88              		.loc 1 14 9 is_stmt 1 view .LVU15
  14:src/mutex.c   ****     }
ARM GAS  /tmp/ccmIpolH.s 			page 3


  89              		.loc 1 14 32 is_stmt 0 view .LVU16
  90 0024 019B     		ldr	r3, [sp, #4]
  91 0026 1360     		str	r3, [r2]
  92 0028 FAE7     		b	.L1
  93              		.cfi_endproc
  94              	.LFE137:
  96              		.section	.text.popWaitingQueue,"ax",%progbits
  97              		.align	1
  98              		.global	popWaitingQueue
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	popWaitingQueue:
 105              	.LVL7:
 106              	.LFB138:
  26:src/mutex.c   **** 
  27:src/mutex.c   **** /****************************** Function to remove task in mutex waiting List *********************
  28:src/mutex.c   **** TCB_Typedef* popWaitingQueue(mutexList** mutexListHead)
  29:src/mutex.c   **** {
 107              		.loc 1 29 1 is_stmt 1 view -0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 112              		.loc 1 29 1 is_stmt 0 view .LVU18
 113 0000 0346     		mov	r3, r0
  30:src/mutex.c   ****     if ((*mutexListHead)->head == NULL) 
 114              		.loc 1 30 5 is_stmt 1 view .LVU19
 115              		.loc 1 30 10 is_stmt 0 view .LVU20
 116 0002 0268     		ldr	r2, [r0]
 117              		.loc 1 30 25 view .LVU21
 118 0004 1068     		ldr	r0, [r2]
 119              	.LVL8:
 120              		.loc 1 30 8 view .LVU22
 121 0006 18B1     		cbz	r0, .L6
  31:src/mutex.c   ****     {
  32:src/mutex.c   ****         return NULL;        // return if list is empty
  33:src/mutex.c   ****     }
  34:src/mutex.c   **** 
  35:src/mutex.c   ****     TCB_Typedef* next_task = (*mutexListHead)->head;    // copy the first node
 122              		.loc 1 35 5 is_stmt 1 view .LVU23
 123              	.LVL9:
  36:src/mutex.c   ****     next_task->next = NULL;                             // detach from mutex list
 124              		.loc 1 36 5 view .LVU24
 125              		.loc 1 36 21 is_stmt 0 view .LVU25
 126 0008 0022     		movs	r2, #0
 127 000a 0260     		str	r2, [r0]
  37:src/mutex.c   **** 
  38:src/mutex.c   ****     (*mutexListHead)->head = next_task->next;           // move to next node in mutex list
 128              		.loc 1 38 5 is_stmt 1 view .LVU26
 129              		.loc 1 38 6 is_stmt 0 view .LVU27
 130 000c 1B68     		ldr	r3, [r3]
 131              	.LVL10:
 132              		.loc 1 38 28 view .LVU28
 133 000e 1A60     		str	r2, [r3]
  39:src/mutex.c   ****     
ARM GAS  /tmp/ccmIpolH.s 			page 4


  40:src/mutex.c   ****     return next_task;       // return the poped node
 134              		.loc 1 40 5 is_stmt 1 view .LVU29
 135              	.LVL11:
 136              	.L6:
  41:src/mutex.c   **** }
 137              		.loc 1 41 1 is_stmt 0 view .LVU30
 138 0010 7047     		bx	lr
 139              		.cfi_endproc
 140              	.LFE138:
 142              		.section	.text.MutexTake,"ax",%progbits
 143              		.align	1
 144              		.global	MutexTake
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv4-sp-d16
 150              	MutexTake:
 151              	.LVL12:
 152              	.LFB139:
  42:src/mutex.c   **** 
  43:src/mutex.c   **** /************************************** Function to aquire mutex lock *****************************
  44:src/mutex.c   **** void MutexTake(Mutex_Typedef** mutex)
  45:src/mutex.c   **** {
 153              		.loc 1 45 1 is_stmt 1 view -0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		.loc 1 45 1 is_stmt 0 view .LVU32
 158 0000 38B5     		push	{r3, r4, r5, lr}
 159              	.LCFI4:
 160              		.cfi_def_cfa_offset 16
 161              		.cfi_offset 3, -16
 162              		.cfi_offset 4, -12
 163              		.cfi_offset 5, -8
 164              		.cfi_offset 14, -4
 165 0002 0446     		mov	r4, r0
  46:src/mutex.c   ****     __disable_irq();
 166              		.loc 1 46 5 is_stmt 1 view .LVU33
 167              	.LBB14:
 168              	.LBI14:
 169              		.file 2 "driver/Core/cmsis_gcc.h"
   1:driver/Core/cmsis_gcc.h **** /**************************************************************************//**
   2:driver/Core/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:driver/Core/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:driver/Core/cmsis_gcc.h ****  * @version  V5.4.1
   5:driver/Core/cmsis_gcc.h ****  * @date     27. May 2021
   6:driver/Core/cmsis_gcc.h ****  ******************************************************************************/
   7:driver/Core/cmsis_gcc.h **** /*
   8:driver/Core/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:driver/Core/cmsis_gcc.h ****  *
  10:driver/Core/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:driver/Core/cmsis_gcc.h ****  *
  12:driver/Core/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:driver/Core/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:driver/Core/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:driver/Core/cmsis_gcc.h ****  *
  16:driver/Core/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
ARM GAS  /tmp/ccmIpolH.s 			page 5


  17:driver/Core/cmsis_gcc.h ****  *
  18:driver/Core/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:driver/Core/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:driver/Core/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:driver/Core/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:driver/Core/cmsis_gcc.h ****  * limitations under the License.
  23:driver/Core/cmsis_gcc.h ****  */
  24:driver/Core/cmsis_gcc.h **** 
  25:driver/Core/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:driver/Core/cmsis_gcc.h **** 
  28:driver/Core/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:driver/Core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:driver/Core/cmsis_gcc.h **** 
  34:driver/Core/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:driver/Core/cmsis_gcc.h **** #ifndef __has_builtin
  36:driver/Core/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:driver/Core/cmsis_gcc.h **** #endif
  38:driver/Core/cmsis_gcc.h **** 
  39:driver/Core/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:driver/Core/cmsis_gcc.h **** #ifndef   __ASM
  41:driver/Core/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:driver/Core/cmsis_gcc.h **** #endif
  43:driver/Core/cmsis_gcc.h **** #ifndef   __INLINE
  44:driver/Core/cmsis_gcc.h ****   #define __INLINE                               inline
  45:driver/Core/cmsis_gcc.h **** #endif
  46:driver/Core/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:driver/Core/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:driver/Core/cmsis_gcc.h **** #endif
  49:driver/Core/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:driver/Core/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:driver/Core/cmsis_gcc.h **** #endif
  52:driver/Core/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:driver/Core/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:driver/Core/cmsis_gcc.h **** #endif
  55:driver/Core/cmsis_gcc.h **** #ifndef   __USED
  56:driver/Core/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:driver/Core/cmsis_gcc.h **** #endif
  58:driver/Core/cmsis_gcc.h **** #ifndef   __WEAK
  59:driver/Core/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:driver/Core/cmsis_gcc.h **** #endif
  61:driver/Core/cmsis_gcc.h **** #ifndef   __PACKED
  62:driver/Core/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:driver/Core/cmsis_gcc.h **** #endif
  64:driver/Core/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:driver/Core/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:driver/Core/cmsis_gcc.h **** #endif
  67:driver/Core/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:driver/Core/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:driver/Core/cmsis_gcc.h **** #endif
  70:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /tmp/ccmIpolH.s 			page 6


  74:driver/Core/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:driver/Core/cmsis_gcc.h **** #endif
  78:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:driver/Core/cmsis_gcc.h **** #endif
  86:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:driver/Core/cmsis_gcc.h **** #endif
  94:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:driver/Core/cmsis_gcc.h **** #endif
 102:driver/Core/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:driver/Core/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:driver/Core/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:driver/Core/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:driver/Core/cmsis_gcc.h **** #endif
 110:driver/Core/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:driver/Core/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:driver/Core/cmsis_gcc.h **** #endif
 113:driver/Core/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:driver/Core/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:driver/Core/cmsis_gcc.h **** #endif
 116:driver/Core/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:driver/Core/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:driver/Core/cmsis_gcc.h **** #endif
 119:driver/Core/cmsis_gcc.h **** 
 120:driver/Core/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:driver/Core/cmsis_gcc.h **** 
 122:driver/Core/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:driver/Core/cmsis_gcc.h **** 
 124:driver/Core/cmsis_gcc.h **** /**
 125:driver/Core/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:driver/Core/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:driver/Core/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:driver/Core/cmsis_gcc.h ****            in the used linker script.
 129:driver/Core/cmsis_gcc.h **** 
 130:driver/Core/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccmIpolH.s 			page 7


 131:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:driver/Core/cmsis_gcc.h **** {
 133:driver/Core/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:driver/Core/cmsis_gcc.h **** 
 135:driver/Core/cmsis_gcc.h ****   typedef struct {
 136:driver/Core/cmsis_gcc.h ****     uint32_t const* src;
 137:driver/Core/cmsis_gcc.h ****     uint32_t* dest;
 138:driver/Core/cmsis_gcc.h ****     uint32_t  wlen;
 139:driver/Core/cmsis_gcc.h ****   } __copy_table_t;
 140:driver/Core/cmsis_gcc.h **** 
 141:driver/Core/cmsis_gcc.h ****   typedef struct {
 142:driver/Core/cmsis_gcc.h ****     uint32_t* dest;
 143:driver/Core/cmsis_gcc.h ****     uint32_t  wlen;
 144:driver/Core/cmsis_gcc.h ****   } __zero_table_t;
 145:driver/Core/cmsis_gcc.h **** 
 146:driver/Core/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:driver/Core/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:driver/Core/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:driver/Core/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:driver/Core/cmsis_gcc.h **** 
 151:driver/Core/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:driver/Core/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:driver/Core/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:driver/Core/cmsis_gcc.h ****     }
 155:driver/Core/cmsis_gcc.h ****   }
 156:driver/Core/cmsis_gcc.h **** 
 157:driver/Core/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:driver/Core/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:driver/Core/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:driver/Core/cmsis_gcc.h ****     }
 161:driver/Core/cmsis_gcc.h ****   }
 162:driver/Core/cmsis_gcc.h **** 
 163:driver/Core/cmsis_gcc.h ****   _start();
 164:driver/Core/cmsis_gcc.h **** }
 165:driver/Core/cmsis_gcc.h **** 
 166:driver/Core/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:driver/Core/cmsis_gcc.h **** #endif
 168:driver/Core/cmsis_gcc.h **** 
 169:driver/Core/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:driver/Core/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:driver/Core/cmsis_gcc.h **** #endif
 172:driver/Core/cmsis_gcc.h **** 
 173:driver/Core/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:driver/Core/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:driver/Core/cmsis_gcc.h **** #endif
 176:driver/Core/cmsis_gcc.h **** 
 177:driver/Core/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:driver/Core/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:driver/Core/cmsis_gcc.h **** #endif
 180:driver/Core/cmsis_gcc.h **** 
 181:driver/Core/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:driver/Core/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:driver/Core/cmsis_gcc.h **** #endif
 184:driver/Core/cmsis_gcc.h **** 
 185:driver/Core/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:driver/Core/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:driver/Core/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
ARM GAS  /tmp/ccmIpolH.s 			page 8


 188:driver/Core/cmsis_gcc.h **** #endif
 189:driver/Core/cmsis_gcc.h **** 
 190:driver/Core/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:driver/Core/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:driver/Core/cmsis_gcc.h **** #endif
 193:driver/Core/cmsis_gcc.h **** 
 194:driver/Core/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:driver/Core/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:driver/Core/cmsis_gcc.h **** #endif
 197:driver/Core/cmsis_gcc.h **** 
 198:driver/Core/cmsis_gcc.h **** 
 199:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:driver/Core/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:driver/Core/cmsis_gcc.h **** }
 202:driver/Core/cmsis_gcc.h **** #endif
 203:driver/Core/cmsis_gcc.h **** 
 204:driver/Core/cmsis_gcc.h **** 
 205:driver/Core/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:driver/Core/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:driver/Core/cmsis_gcc.h ****   Access to dedicated instructions
 208:driver/Core/cmsis_gcc.h ****   @{
 209:driver/Core/cmsis_gcc.h **** */
 210:driver/Core/cmsis_gcc.h **** 
 211:driver/Core/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:driver/Core/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:driver/Core/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:driver/Core/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:driver/Core/cmsis_gcc.h **** #else
 219:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:driver/Core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:driver/Core/cmsis_gcc.h **** #endif
 223:driver/Core/cmsis_gcc.h **** 
 224:driver/Core/cmsis_gcc.h **** /**
 225:driver/Core/cmsis_gcc.h ****   \brief   No Operation
 226:driver/Core/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:driver/Core/cmsis_gcc.h ****  */
 228:driver/Core/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:driver/Core/cmsis_gcc.h **** 
 230:driver/Core/cmsis_gcc.h **** /**
 231:driver/Core/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:driver/Core/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:driver/Core/cmsis_gcc.h ****  */
 234:driver/Core/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:driver/Core/cmsis_gcc.h **** 
 236:driver/Core/cmsis_gcc.h **** 
 237:driver/Core/cmsis_gcc.h **** /**
 238:driver/Core/cmsis_gcc.h ****   \brief   Wait For Event
 239:driver/Core/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:driver/Core/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:driver/Core/cmsis_gcc.h ****  */
 242:driver/Core/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:driver/Core/cmsis_gcc.h **** 
 244:driver/Core/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmIpolH.s 			page 9


 245:driver/Core/cmsis_gcc.h **** /**
 246:driver/Core/cmsis_gcc.h ****   \brief   Send Event
 247:driver/Core/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:driver/Core/cmsis_gcc.h ****  */
 249:driver/Core/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:driver/Core/cmsis_gcc.h **** 
 251:driver/Core/cmsis_gcc.h **** 
 252:driver/Core/cmsis_gcc.h **** /**
 253:driver/Core/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:driver/Core/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:driver/Core/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:driver/Core/cmsis_gcc.h ****            after the instruction has been completed.
 257:driver/Core/cmsis_gcc.h ****  */
 258:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:driver/Core/cmsis_gcc.h **** {
 260:driver/Core/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:driver/Core/cmsis_gcc.h **** }
 262:driver/Core/cmsis_gcc.h **** 
 263:driver/Core/cmsis_gcc.h **** 
 264:driver/Core/cmsis_gcc.h **** /**
 265:driver/Core/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:driver/Core/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:driver/Core/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:driver/Core/cmsis_gcc.h ****  */
 269:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:driver/Core/cmsis_gcc.h **** {
 271:driver/Core/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:driver/Core/cmsis_gcc.h **** }
 273:driver/Core/cmsis_gcc.h **** 
 274:driver/Core/cmsis_gcc.h **** 
 275:driver/Core/cmsis_gcc.h **** /**
 276:driver/Core/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:driver/Core/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:driver/Core/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:driver/Core/cmsis_gcc.h ****  */
 280:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:driver/Core/cmsis_gcc.h **** {
 282:driver/Core/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:driver/Core/cmsis_gcc.h **** }
 284:driver/Core/cmsis_gcc.h **** 
 285:driver/Core/cmsis_gcc.h **** 
 286:driver/Core/cmsis_gcc.h **** /**
 287:driver/Core/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:driver/Core/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 291:driver/Core/cmsis_gcc.h ****  */
 292:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:driver/Core/cmsis_gcc.h **** {
 294:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:driver/Core/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:driver/Core/cmsis_gcc.h **** #else
 297:driver/Core/cmsis_gcc.h ****   uint32_t result;
 298:driver/Core/cmsis_gcc.h **** 
 299:driver/Core/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:driver/Core/cmsis_gcc.h ****   return result;
 301:driver/Core/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccmIpolH.s 			page 10


 302:driver/Core/cmsis_gcc.h **** }
 303:driver/Core/cmsis_gcc.h **** 
 304:driver/Core/cmsis_gcc.h **** 
 305:driver/Core/cmsis_gcc.h **** /**
 306:driver/Core/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:driver/Core/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 310:driver/Core/cmsis_gcc.h ****  */
 311:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:driver/Core/cmsis_gcc.h **** {
 313:driver/Core/cmsis_gcc.h ****   uint32_t result;
 314:driver/Core/cmsis_gcc.h **** 
 315:driver/Core/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:driver/Core/cmsis_gcc.h ****   return result;
 317:driver/Core/cmsis_gcc.h **** }
 318:driver/Core/cmsis_gcc.h **** 
 319:driver/Core/cmsis_gcc.h **** 
 320:driver/Core/cmsis_gcc.h **** /**
 321:driver/Core/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:driver/Core/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 325:driver/Core/cmsis_gcc.h ****  */
 326:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:driver/Core/cmsis_gcc.h **** {
 328:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:driver/Core/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:driver/Core/cmsis_gcc.h **** #else
 331:driver/Core/cmsis_gcc.h ****   int16_t result;
 332:driver/Core/cmsis_gcc.h **** 
 333:driver/Core/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:driver/Core/cmsis_gcc.h ****   return result;
 335:driver/Core/cmsis_gcc.h **** #endif
 336:driver/Core/cmsis_gcc.h **** }
 337:driver/Core/cmsis_gcc.h **** 
 338:driver/Core/cmsis_gcc.h **** 
 339:driver/Core/cmsis_gcc.h **** /**
 340:driver/Core/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:driver/Core/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:driver/Core/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:driver/Core/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:driver/Core/cmsis_gcc.h ****   \return               Rotated value
 345:driver/Core/cmsis_gcc.h ****  */
 346:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:driver/Core/cmsis_gcc.h **** {
 348:driver/Core/cmsis_gcc.h ****   op2 %= 32U;
 349:driver/Core/cmsis_gcc.h ****   if (op2 == 0U)
 350:driver/Core/cmsis_gcc.h ****   {
 351:driver/Core/cmsis_gcc.h ****     return op1;
 352:driver/Core/cmsis_gcc.h ****   }
 353:driver/Core/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:driver/Core/cmsis_gcc.h **** }
 355:driver/Core/cmsis_gcc.h **** 
 356:driver/Core/cmsis_gcc.h **** 
 357:driver/Core/cmsis_gcc.h **** /**
 358:driver/Core/cmsis_gcc.h ****   \brief   Breakpoint
ARM GAS  /tmp/ccmIpolH.s 			page 11


 359:driver/Core/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:driver/Core/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:driver/Core/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:driver/Core/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:driver/Core/cmsis_gcc.h ****  */
 364:driver/Core/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:driver/Core/cmsis_gcc.h **** 
 366:driver/Core/cmsis_gcc.h **** 
 367:driver/Core/cmsis_gcc.h **** /**
 368:driver/Core/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:driver/Core/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:driver/Core/cmsis_gcc.h ****   \return               Reversed value
 372:driver/Core/cmsis_gcc.h ****  */
 373:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:driver/Core/cmsis_gcc.h **** {
 375:driver/Core/cmsis_gcc.h ****   uint32_t result;
 376:driver/Core/cmsis_gcc.h **** 
 377:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:driver/Core/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:driver/Core/cmsis_gcc.h **** #else
 382:driver/Core/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:driver/Core/cmsis_gcc.h **** 
 384:driver/Core/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:driver/Core/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:driver/Core/cmsis_gcc.h ****   {
 387:driver/Core/cmsis_gcc.h ****     result <<= 1U;
 388:driver/Core/cmsis_gcc.h ****     result |= value & 1U;
 389:driver/Core/cmsis_gcc.h ****     s--;
 390:driver/Core/cmsis_gcc.h ****   }
 391:driver/Core/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:driver/Core/cmsis_gcc.h **** #endif
 393:driver/Core/cmsis_gcc.h ****   return result;
 394:driver/Core/cmsis_gcc.h **** }
 395:driver/Core/cmsis_gcc.h **** 
 396:driver/Core/cmsis_gcc.h **** 
 397:driver/Core/cmsis_gcc.h **** /**
 398:driver/Core/cmsis_gcc.h ****   \brief   Count leading zeros
 399:driver/Core/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:driver/Core/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:driver/Core/cmsis_gcc.h ****  */
 403:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:driver/Core/cmsis_gcc.h **** {
 405:driver/Core/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:driver/Core/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:driver/Core/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:driver/Core/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:driver/Core/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:driver/Core/cmsis_gcc.h ****      is non-zero".
 411:driver/Core/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:driver/Core/cmsis_gcc.h ****      single CLZ instruction.
 413:driver/Core/cmsis_gcc.h ****    */
 414:driver/Core/cmsis_gcc.h ****   if (value == 0U)
 415:driver/Core/cmsis_gcc.h ****   {
ARM GAS  /tmp/ccmIpolH.s 			page 12


 416:driver/Core/cmsis_gcc.h ****     return 32U;
 417:driver/Core/cmsis_gcc.h ****   }
 418:driver/Core/cmsis_gcc.h ****   return __builtin_clz(value);
 419:driver/Core/cmsis_gcc.h **** }
 420:driver/Core/cmsis_gcc.h **** 
 421:driver/Core/cmsis_gcc.h **** 
 422:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:driver/Core/cmsis_gcc.h **** /**
 427:driver/Core/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:driver/Core/cmsis_gcc.h ****  */
 432:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:driver/Core/cmsis_gcc.h **** {
 434:driver/Core/cmsis_gcc.h ****     uint32_t result;
 435:driver/Core/cmsis_gcc.h **** 
 436:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:driver/Core/cmsis_gcc.h **** #else
 439:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:driver/Core/cmsis_gcc.h ****     */
 442:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:driver/Core/cmsis_gcc.h **** #endif
 444:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:driver/Core/cmsis_gcc.h **** }
 446:driver/Core/cmsis_gcc.h **** 
 447:driver/Core/cmsis_gcc.h **** 
 448:driver/Core/cmsis_gcc.h **** /**
 449:driver/Core/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:driver/Core/cmsis_gcc.h ****  */
 454:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:driver/Core/cmsis_gcc.h **** {
 456:driver/Core/cmsis_gcc.h ****     uint32_t result;
 457:driver/Core/cmsis_gcc.h **** 
 458:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:driver/Core/cmsis_gcc.h **** #else
 461:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:driver/Core/cmsis_gcc.h ****     */
 464:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:driver/Core/cmsis_gcc.h **** #endif
 466:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:driver/Core/cmsis_gcc.h **** }
 468:driver/Core/cmsis_gcc.h **** 
 469:driver/Core/cmsis_gcc.h **** 
 470:driver/Core/cmsis_gcc.h **** /**
 471:driver/Core/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
ARM GAS  /tmp/ccmIpolH.s 			page 13


 473:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:driver/Core/cmsis_gcc.h ****  */
 476:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:driver/Core/cmsis_gcc.h **** {
 478:driver/Core/cmsis_gcc.h ****     uint32_t result;
 479:driver/Core/cmsis_gcc.h **** 
 480:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:driver/Core/cmsis_gcc.h ****    return(result);
 482:driver/Core/cmsis_gcc.h **** }
 483:driver/Core/cmsis_gcc.h **** 
 484:driver/Core/cmsis_gcc.h **** 
 485:driver/Core/cmsis_gcc.h **** /**
 486:driver/Core/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 491:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 492:driver/Core/cmsis_gcc.h ****  */
 493:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:driver/Core/cmsis_gcc.h **** {
 495:driver/Core/cmsis_gcc.h ****    uint32_t result;
 496:driver/Core/cmsis_gcc.h **** 
 497:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:driver/Core/cmsis_gcc.h ****    return(result);
 499:driver/Core/cmsis_gcc.h **** }
 500:driver/Core/cmsis_gcc.h **** 
 501:driver/Core/cmsis_gcc.h **** 
 502:driver/Core/cmsis_gcc.h **** /**
 503:driver/Core/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 508:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 509:driver/Core/cmsis_gcc.h ****  */
 510:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:driver/Core/cmsis_gcc.h **** {
 512:driver/Core/cmsis_gcc.h ****    uint32_t result;
 513:driver/Core/cmsis_gcc.h **** 
 514:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:driver/Core/cmsis_gcc.h ****    return(result);
 516:driver/Core/cmsis_gcc.h **** }
 517:driver/Core/cmsis_gcc.h **** 
 518:driver/Core/cmsis_gcc.h **** 
 519:driver/Core/cmsis_gcc.h **** /**
 520:driver/Core/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:driver/Core/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 525:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 526:driver/Core/cmsis_gcc.h ****  */
 527:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:driver/Core/cmsis_gcc.h **** {
 529:driver/Core/cmsis_gcc.h ****    uint32_t result;
ARM GAS  /tmp/ccmIpolH.s 			page 14


 530:driver/Core/cmsis_gcc.h **** 
 531:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:driver/Core/cmsis_gcc.h ****    return(result);
 533:driver/Core/cmsis_gcc.h **** }
 534:driver/Core/cmsis_gcc.h **** 
 535:driver/Core/cmsis_gcc.h **** 
 536:driver/Core/cmsis_gcc.h **** /**
 537:driver/Core/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:driver/Core/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:driver/Core/cmsis_gcc.h ****  */
 540:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:driver/Core/cmsis_gcc.h **** {
 542:driver/Core/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:driver/Core/cmsis_gcc.h **** }
 544:driver/Core/cmsis_gcc.h **** 
 545:driver/Core/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:driver/Core/cmsis_gcc.h **** 
 550:driver/Core/cmsis_gcc.h **** 
 551:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:driver/Core/cmsis_gcc.h **** /**
 555:driver/Core/cmsis_gcc.h ****   \brief   Signed Saturate
 556:driver/Core/cmsis_gcc.h ****   \details Saturates a signed value.
 557:driver/Core/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:driver/Core/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 560:driver/Core/cmsis_gcc.h ****  */
 561:driver/Core/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:driver/Core/cmsis_gcc.h **** __extension__ \
 563:driver/Core/cmsis_gcc.h **** ({                          \
 564:driver/Core/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:driver/Core/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:driver/Core/cmsis_gcc.h ****   __RES; \
 567:driver/Core/cmsis_gcc.h ****  })
 568:driver/Core/cmsis_gcc.h **** 
 569:driver/Core/cmsis_gcc.h **** 
 570:driver/Core/cmsis_gcc.h **** /**
 571:driver/Core/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:driver/Core/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:driver/Core/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:driver/Core/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 576:driver/Core/cmsis_gcc.h ****  */
 577:driver/Core/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:driver/Core/cmsis_gcc.h **** __extension__ \
 579:driver/Core/cmsis_gcc.h **** ({                          \
 580:driver/Core/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:driver/Core/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:driver/Core/cmsis_gcc.h ****   __RES; \
 583:driver/Core/cmsis_gcc.h ****  })
 584:driver/Core/cmsis_gcc.h **** 
 585:driver/Core/cmsis_gcc.h **** 
 586:driver/Core/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccmIpolH.s 			page 15


 587:driver/Core/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:driver/Core/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:driver/Core/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:driver/Core/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:driver/Core/cmsis_gcc.h ****   \return               Rotated value
 592:driver/Core/cmsis_gcc.h ****  */
 593:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:driver/Core/cmsis_gcc.h **** {
 595:driver/Core/cmsis_gcc.h ****   uint32_t result;
 596:driver/Core/cmsis_gcc.h **** 
 597:driver/Core/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:driver/Core/cmsis_gcc.h ****   return(result);
 599:driver/Core/cmsis_gcc.h **** }
 600:driver/Core/cmsis_gcc.h **** 
 601:driver/Core/cmsis_gcc.h **** 
 602:driver/Core/cmsis_gcc.h **** /**
 603:driver/Core/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:driver/Core/cmsis_gcc.h ****  */
 608:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:driver/Core/cmsis_gcc.h **** {
 610:driver/Core/cmsis_gcc.h ****     uint32_t result;
 611:driver/Core/cmsis_gcc.h **** 
 612:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:driver/Core/cmsis_gcc.h **** #else
 615:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:driver/Core/cmsis_gcc.h ****     */
 618:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:driver/Core/cmsis_gcc.h **** #endif
 620:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:driver/Core/cmsis_gcc.h **** }
 622:driver/Core/cmsis_gcc.h **** 
 623:driver/Core/cmsis_gcc.h **** 
 624:driver/Core/cmsis_gcc.h **** /**
 625:driver/Core/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:driver/Core/cmsis_gcc.h ****  */
 630:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:driver/Core/cmsis_gcc.h **** {
 632:driver/Core/cmsis_gcc.h ****     uint32_t result;
 633:driver/Core/cmsis_gcc.h **** 
 634:driver/Core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:driver/Core/cmsis_gcc.h **** #else
 637:driver/Core/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:driver/Core/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:driver/Core/cmsis_gcc.h ****     */
 640:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:driver/Core/cmsis_gcc.h **** #endif
 642:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:driver/Core/cmsis_gcc.h **** }
ARM GAS  /tmp/ccmIpolH.s 			page 16


 644:driver/Core/cmsis_gcc.h **** 
 645:driver/Core/cmsis_gcc.h **** 
 646:driver/Core/cmsis_gcc.h **** /**
 647:driver/Core/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:driver/Core/cmsis_gcc.h ****  */
 652:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:driver/Core/cmsis_gcc.h **** {
 654:driver/Core/cmsis_gcc.h ****     uint32_t result;
 655:driver/Core/cmsis_gcc.h **** 
 656:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:driver/Core/cmsis_gcc.h ****    return(result);
 658:driver/Core/cmsis_gcc.h **** }
 659:driver/Core/cmsis_gcc.h **** 
 660:driver/Core/cmsis_gcc.h **** 
 661:driver/Core/cmsis_gcc.h **** /**
 662:driver/Core/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:driver/Core/cmsis_gcc.h ****  */
 667:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:driver/Core/cmsis_gcc.h **** {
 669:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:driver/Core/cmsis_gcc.h **** }
 671:driver/Core/cmsis_gcc.h **** 
 672:driver/Core/cmsis_gcc.h **** 
 673:driver/Core/cmsis_gcc.h **** /**
 674:driver/Core/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:driver/Core/cmsis_gcc.h ****  */
 679:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:driver/Core/cmsis_gcc.h **** {
 681:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:driver/Core/cmsis_gcc.h **** }
 683:driver/Core/cmsis_gcc.h **** 
 684:driver/Core/cmsis_gcc.h **** 
 685:driver/Core/cmsis_gcc.h **** /**
 686:driver/Core/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:driver/Core/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:driver/Core/cmsis_gcc.h ****  */
 691:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:driver/Core/cmsis_gcc.h **** {
 693:driver/Core/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:driver/Core/cmsis_gcc.h **** }
 695:driver/Core/cmsis_gcc.h **** 
 696:driver/Core/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:driver/Core/cmsis_gcc.h **** 
 700:driver/Core/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccmIpolH.s 			page 17


 701:driver/Core/cmsis_gcc.h ****   \brief   Signed Saturate
 702:driver/Core/cmsis_gcc.h ****   \details Saturates a signed value.
 703:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:driver/Core/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 706:driver/Core/cmsis_gcc.h ****  */
 707:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:driver/Core/cmsis_gcc.h **** {
 709:driver/Core/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:driver/Core/cmsis_gcc.h ****   {
 711:driver/Core/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:driver/Core/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:driver/Core/cmsis_gcc.h ****     if (val > max)
 714:driver/Core/cmsis_gcc.h ****     {
 715:driver/Core/cmsis_gcc.h ****       return max;
 716:driver/Core/cmsis_gcc.h ****     }
 717:driver/Core/cmsis_gcc.h ****     else if (val < min)
 718:driver/Core/cmsis_gcc.h ****     {
 719:driver/Core/cmsis_gcc.h ****       return min;
 720:driver/Core/cmsis_gcc.h ****     }
 721:driver/Core/cmsis_gcc.h ****   }
 722:driver/Core/cmsis_gcc.h ****   return val;
 723:driver/Core/cmsis_gcc.h **** }
 724:driver/Core/cmsis_gcc.h **** 
 725:driver/Core/cmsis_gcc.h **** /**
 726:driver/Core/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:driver/Core/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:driver/Core/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:driver/Core/cmsis_gcc.h ****   \return             Saturated value
 731:driver/Core/cmsis_gcc.h ****  */
 732:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:driver/Core/cmsis_gcc.h **** {
 734:driver/Core/cmsis_gcc.h ****   if (sat <= 31U)
 735:driver/Core/cmsis_gcc.h ****   {
 736:driver/Core/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:driver/Core/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:driver/Core/cmsis_gcc.h ****     {
 739:driver/Core/cmsis_gcc.h ****       return max;
 740:driver/Core/cmsis_gcc.h ****     }
 741:driver/Core/cmsis_gcc.h ****     else if (val < 0)
 742:driver/Core/cmsis_gcc.h ****     {
 743:driver/Core/cmsis_gcc.h ****       return 0U;
 744:driver/Core/cmsis_gcc.h ****     }
 745:driver/Core/cmsis_gcc.h ****   }
 746:driver/Core/cmsis_gcc.h ****   return (uint32_t)val;
 747:driver/Core/cmsis_gcc.h **** }
 748:driver/Core/cmsis_gcc.h **** 
 749:driver/Core/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:driver/Core/cmsis_gcc.h **** 
 753:driver/Core/cmsis_gcc.h **** 
 754:driver/Core/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:driver/Core/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:driver/Core/cmsis_gcc.h **** /**
 757:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
ARM GAS  /tmp/ccmIpolH.s 			page 18


 758:driver/Core/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:driver/Core/cmsis_gcc.h ****  */
 762:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:driver/Core/cmsis_gcc.h **** {
 764:driver/Core/cmsis_gcc.h ****     uint32_t result;
 765:driver/Core/cmsis_gcc.h **** 
 766:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);
 768:driver/Core/cmsis_gcc.h **** }
 769:driver/Core/cmsis_gcc.h **** 
 770:driver/Core/cmsis_gcc.h **** 
 771:driver/Core/cmsis_gcc.h **** /**
 772:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:driver/Core/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:driver/Core/cmsis_gcc.h ****  */
 777:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:driver/Core/cmsis_gcc.h **** {
 779:driver/Core/cmsis_gcc.h ****     uint32_t result;
 780:driver/Core/cmsis_gcc.h **** 
 781:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);
 783:driver/Core/cmsis_gcc.h **** }
 784:driver/Core/cmsis_gcc.h **** 
 785:driver/Core/cmsis_gcc.h **** 
 786:driver/Core/cmsis_gcc.h **** /**
 787:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:driver/Core/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:driver/Core/cmsis_gcc.h ****  */
 792:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:driver/Core/cmsis_gcc.h **** {
 794:driver/Core/cmsis_gcc.h ****     uint32_t result;
 795:driver/Core/cmsis_gcc.h **** 
 796:driver/Core/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:driver/Core/cmsis_gcc.h ****    return(result);
 798:driver/Core/cmsis_gcc.h **** }
 799:driver/Core/cmsis_gcc.h **** 
 800:driver/Core/cmsis_gcc.h **** 
 801:driver/Core/cmsis_gcc.h **** /**
 802:driver/Core/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:driver/Core/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:driver/Core/cmsis_gcc.h ****  */
 807:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:driver/Core/cmsis_gcc.h **** {
 809:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:driver/Core/cmsis_gcc.h **** }
 811:driver/Core/cmsis_gcc.h **** 
 812:driver/Core/cmsis_gcc.h **** 
 813:driver/Core/cmsis_gcc.h **** /**
 814:driver/Core/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
ARM GAS  /tmp/ccmIpolH.s 			page 19


 815:driver/Core/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:driver/Core/cmsis_gcc.h ****  */
 819:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:driver/Core/cmsis_gcc.h **** {
 821:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:driver/Core/cmsis_gcc.h **** }
 823:driver/Core/cmsis_gcc.h **** 
 824:driver/Core/cmsis_gcc.h **** 
 825:driver/Core/cmsis_gcc.h **** /**
 826:driver/Core/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:driver/Core/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:driver/Core/cmsis_gcc.h ****  */
 831:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:driver/Core/cmsis_gcc.h **** {
 833:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:driver/Core/cmsis_gcc.h **** }
 835:driver/Core/cmsis_gcc.h **** 
 836:driver/Core/cmsis_gcc.h **** 
 837:driver/Core/cmsis_gcc.h **** /**
 838:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:driver/Core/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:driver/Core/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:driver/Core/cmsis_gcc.h ****  */
 843:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:driver/Core/cmsis_gcc.h **** {
 845:driver/Core/cmsis_gcc.h ****     uint32_t result;
 846:driver/Core/cmsis_gcc.h **** 
 847:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:driver/Core/cmsis_gcc.h ****    return ((uint8_t) result);
 849:driver/Core/cmsis_gcc.h **** }
 850:driver/Core/cmsis_gcc.h **** 
 851:driver/Core/cmsis_gcc.h **** 
 852:driver/Core/cmsis_gcc.h **** /**
 853:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:driver/Core/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:driver/Core/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:driver/Core/cmsis_gcc.h ****  */
 858:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:driver/Core/cmsis_gcc.h **** {
 860:driver/Core/cmsis_gcc.h ****     uint32_t result;
 861:driver/Core/cmsis_gcc.h **** 
 862:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:driver/Core/cmsis_gcc.h ****    return ((uint16_t) result);
 864:driver/Core/cmsis_gcc.h **** }
 865:driver/Core/cmsis_gcc.h **** 
 866:driver/Core/cmsis_gcc.h **** 
 867:driver/Core/cmsis_gcc.h **** /**
 868:driver/Core/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:driver/Core/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:driver/Core/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
ARM GAS  /tmp/ccmIpolH.s 			page 20


 872:driver/Core/cmsis_gcc.h ****  */
 873:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:driver/Core/cmsis_gcc.h **** {
 875:driver/Core/cmsis_gcc.h ****     uint32_t result;
 876:driver/Core/cmsis_gcc.h **** 
 877:driver/Core/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:driver/Core/cmsis_gcc.h ****    return(result);
 879:driver/Core/cmsis_gcc.h **** }
 880:driver/Core/cmsis_gcc.h **** 
 881:driver/Core/cmsis_gcc.h **** 
 882:driver/Core/cmsis_gcc.h **** /**
 883:driver/Core/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:driver/Core/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 888:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 889:driver/Core/cmsis_gcc.h ****  */
 890:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:driver/Core/cmsis_gcc.h **** {
 892:driver/Core/cmsis_gcc.h ****    uint32_t result;
 893:driver/Core/cmsis_gcc.h **** 
 894:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:driver/Core/cmsis_gcc.h ****    return(result);
 896:driver/Core/cmsis_gcc.h **** }
 897:driver/Core/cmsis_gcc.h **** 
 898:driver/Core/cmsis_gcc.h **** 
 899:driver/Core/cmsis_gcc.h **** /**
 900:driver/Core/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:driver/Core/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 905:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 906:driver/Core/cmsis_gcc.h ****  */
 907:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:driver/Core/cmsis_gcc.h **** {
 909:driver/Core/cmsis_gcc.h ****    uint32_t result;
 910:driver/Core/cmsis_gcc.h **** 
 911:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:driver/Core/cmsis_gcc.h ****    return(result);
 913:driver/Core/cmsis_gcc.h **** }
 914:driver/Core/cmsis_gcc.h **** 
 915:driver/Core/cmsis_gcc.h **** 
 916:driver/Core/cmsis_gcc.h **** /**
 917:driver/Core/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:driver/Core/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:driver/Core/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:driver/Core/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:driver/Core/cmsis_gcc.h ****   \return          0  Function succeeded
 922:driver/Core/cmsis_gcc.h ****   \return          1  Function failed
 923:driver/Core/cmsis_gcc.h ****  */
 924:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:driver/Core/cmsis_gcc.h **** {
 926:driver/Core/cmsis_gcc.h ****    uint32_t result;
 927:driver/Core/cmsis_gcc.h **** 
 928:driver/Core/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
ARM GAS  /tmp/ccmIpolH.s 			page 21


 929:driver/Core/cmsis_gcc.h ****    return(result);
 930:driver/Core/cmsis_gcc.h **** }
 931:driver/Core/cmsis_gcc.h **** 
 932:driver/Core/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:driver/Core/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:driver/Core/cmsis_gcc.h **** 
 935:driver/Core/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:driver/Core/cmsis_gcc.h **** 
 937:driver/Core/cmsis_gcc.h **** 
 938:driver/Core/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:driver/Core/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:driver/Core/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:driver/Core/cmsis_gcc.h ****   @{
 942:driver/Core/cmsis_gcc.h ****  */
 943:driver/Core/cmsis_gcc.h **** 
 944:driver/Core/cmsis_gcc.h **** /**
 945:driver/Core/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:driver/Core/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:driver/Core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:driver/Core/cmsis_gcc.h ****  */
 949:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:driver/Core/cmsis_gcc.h **** {
 951:driver/Core/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:driver/Core/cmsis_gcc.h **** }
 953:driver/Core/cmsis_gcc.h **** 
 954:driver/Core/cmsis_gcc.h **** 
 955:driver/Core/cmsis_gcc.h **** /**
 956:driver/Core/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:driver/Core/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:driver/Core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:driver/Core/cmsis_gcc.h ****  */
 960:driver/Core/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 170              		.loc 2 960 27 view .LVU34
 171              	.LBB15:
 961:driver/Core/cmsis_gcc.h **** {
 962:driver/Core/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 172              		.loc 2 962 3 view .LVU35
 173              		.syntax unified
 174              	@ 962 "driver/Core/cmsis_gcc.h" 1
 175 0004 72B6     		cpsid i
 176              	@ 0 "" 2
 177              		.thumb
 178              		.syntax unified
 179              	.LBE15:
 180              	.LBE14:
  47:src/mutex.c   **** 
  48:src/mutex.c   ****     TCB_Typedef* current_task = getCurrentTask();       // get current task
 181              		.loc 1 48 5 view .LVU36
 182              		.loc 1 48 33 is_stmt 0 view .LVU37
 183 0006 FFF7FEFF 		bl	getCurrentTask
 184              	.LVL13:
 185              		.loc 1 48 33 view .LVU38
 186 000a 0546     		mov	r5, r0
 187              	.LVL14:
  49:src/mutex.c   ****     
  50:src/mutex.c   ****     if (!((*mutex)->lock))
 188              		.loc 1 50 5 is_stmt 1 view .LVU39
ARM GAS  /tmp/ccmIpolH.s 			page 22


 189              		.loc 1 50 12 is_stmt 0 view .LVU40
 190 000c 2368     		ldr	r3, [r4]
 191              		.loc 1 50 19 view .LVU41
 192 000e 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 193              		.loc 1 50 8 view .LVU42
 194 0010 3AB9     		cbnz	r2, .L9
  51:src/mutex.c   ****     {
  52:src/mutex.c   ****         (*mutex)->lock = 1;         // set lock
 195              		.loc 1 52 9 is_stmt 1 view .LVU43
 196              		.loc 1 52 24 is_stmt 0 view .LVU44
 197 0012 0122     		movs	r2, #1
 198 0014 1A72     		strb	r2, [r3, #8]
  53:src/mutex.c   ****         (*mutex)->owner = current_task;
 199              		.loc 1 53 9 is_stmt 1 view .LVU45
 200              		.loc 1 53 10 is_stmt 0 view .LVU46
 201 0016 2368     		ldr	r3, [r4]
 202              		.loc 1 53 25 view .LVU47
 203 0018 1860     		str	r0, [r3]
  54:src/mutex.c   ****         (*mutex)->priority = current_task->priority;        // copy mutex aquired task priority for
 204              		.loc 1 54 9 is_stmt 1 view .LVU48
 205              		.loc 1 54 10 is_stmt 0 view .LVU49
 206 001a 2368     		ldr	r3, [r4]
 207              		.loc 1 54 28 view .LVU50
 208 001c 827D     		ldrb	r2, [r0, #22]	@ zero_extendqisi2
 209 001e 5A72     		strb	r2, [r3, #9]
  55:src/mutex.c   ****         return;
 210              		.loc 1 55 9 is_stmt 1 view .LVU51
 211              	.LVL15:
 212              	.L8:
  56:src/mutex.c   ****     }
  57:src/mutex.c   ****     else
  58:src/mutex.c   ****     {
  59:src/mutex.c   ****         current_task->state = BLOCKED;      // change state from running to waiting / blocked
  60:src/mutex.c   ****         pushWaitingQueue(&((*mutex)->waiting_task), current_task);      // push to mutex list
  61:src/mutex.c   **** 
  62:src/mutex.c   ****         if (current_task->priority < (*mutex)->priority)
  63:src/mutex.c   ****         {
  64:src/mutex.c   ****             (*mutex)->owner->priority = current_task->priority;         // waiting task priority is
  65:src/mutex.c   ****         }
  66:src/mutex.c   **** 
  67:src/mutex.c   ****         SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;        // trigger PendSV interrupt for context switchi
  68:src/mutex.c   ****     }
  69:src/mutex.c   ****     __enable_irq();
  70:src/mutex.c   **** }
 213              		.loc 1 70 1 is_stmt 0 view .LVU52
 214 0020 38BD     		pop	{r3, r4, r5, pc}
 215              	.LVL16:
 216              	.L9:
  59:src/mutex.c   ****         pushWaitingQueue(&((*mutex)->waiting_task), current_task);      // push to mutex list
 217              		.loc 1 59 9 is_stmt 1 view .LVU53
  59:src/mutex.c   ****         pushWaitingQueue(&((*mutex)->waiting_task), current_task);      // push to mutex list
 218              		.loc 1 59 29 is_stmt 0 view .LVU54
 219 0022 0323     		movs	r3, #3
 220 0024 8382     		strh	r3, [r0, #20]	@ movhi
  60:src/mutex.c   **** 
 221              		.loc 1 60 9 is_stmt 1 view .LVU55
  60:src/mutex.c   **** 
ARM GAS  /tmp/ccmIpolH.s 			page 23


 222              		.loc 1 60 29 is_stmt 0 view .LVU56
 223 0026 2068     		ldr	r0, [r4]
 224              	.LVL17:
  60:src/mutex.c   **** 
 225              		.loc 1 60 9 view .LVU57
 226 0028 2946     		mov	r1, r5
 227 002a 0430     		adds	r0, r0, #4
 228 002c FFF7FEFF 		bl	pushWaitingQueue
 229              	.LVL18:
  62:src/mutex.c   ****         {
 230              		.loc 1 62 9 is_stmt 1 view .LVU58
  62:src/mutex.c   ****         {
 231              		.loc 1 62 25 is_stmt 0 view .LVU59
 232 0030 EB8A     		ldrh	r3, [r5, #22]
  62:src/mutex.c   ****         {
 233              		.loc 1 62 39 view .LVU60
 234 0032 2268     		ldr	r2, [r4]
  62:src/mutex.c   ****         {
 235              		.loc 1 62 46 view .LVU61
 236 0034 517A     		ldrb	r1, [r2, #9]	@ zero_extendqisi2
  62:src/mutex.c   ****         {
 237              		.loc 1 62 12 view .LVU62
 238 0036 8B42     		cmp	r3, r1
 239 0038 01D2     		bcs	.L11
  64:src/mutex.c   ****         }
 240              		.loc 1 64 13 is_stmt 1 view .LVU63
  64:src/mutex.c   ****         }
 241              		.loc 1 64 21 is_stmt 0 view .LVU64
 242 003a 1268     		ldr	r2, [r2]
  64:src/mutex.c   ****         }
 243              		.loc 1 64 39 view .LVU65
 244 003c D382     		strh	r3, [r2, #22]	@ movhi
 245              	.L11:
  67:src/mutex.c   ****     }
 246              		.loc 1 67 9 is_stmt 1 view .LVU66
  67:src/mutex.c   ****     }
 247              		.loc 1 67 19 is_stmt 0 view .LVU67
 248 003e 034A     		ldr	r2, .L13
 249 0040 5368     		ldr	r3, [r2, #4]
 250 0042 43F08053 		orr	r3, r3, #268435456
 251 0046 5360     		str	r3, [r2, #4]
  69:src/mutex.c   **** }
 252              		.loc 1 69 5 is_stmt 1 view .LVU68
 253              	.LBB16:
 254              	.LBI16:
 949:driver/Core/cmsis_gcc.h **** {
 255              		.loc 2 949 27 view .LVU69
 256              	.LBB17:
 951:driver/Core/cmsis_gcc.h **** }
 257              		.loc 2 951 3 view .LVU70
 258              		.syntax unified
 259              	@ 951 "driver/Core/cmsis_gcc.h" 1
 260 0048 62B6     		cpsie i
 261              	@ 0 "" 2
 952:driver/Core/cmsis_gcc.h **** 
 262              		.loc 2 952 1 is_stmt 0 view .LVU71
 263              		.thumb
ARM GAS  /tmp/ccmIpolH.s 			page 24


 264              		.syntax unified
 265 004a E9E7     		b	.L8
 266              	.L14:
 267              		.align	2
 268              	.L13:
 269 004c 00ED00E0 		.word	-536810240
 270              	.LBE17:
 271              	.LBE16:
 272              		.cfi_endproc
 273              	.LFE139:
 275              		.section	.text.MutexGive,"ax",%progbits
 276              		.align	1
 277              		.global	MutexGive
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 281              		.fpu fpv4-sp-d16
 283              	MutexGive:
 284              	.LVL19:
 285              	.LFB140:
  71:src/mutex.c   **** 
  72:src/mutex.c   **** /************************************** Function to return mutex lock *****************************
  73:src/mutex.c   **** void MutexGive(Mutex_Typedef** mutex)
  74:src/mutex.c   **** {
 286              		.loc 1 74 1 is_stmt 1 view -0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 8
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290              		.loc 1 74 1 is_stmt 0 view .LVU73
 291 0000 10B5     		push	{r4, lr}
 292              	.LCFI5:
 293              		.cfi_def_cfa_offset 8
 294              		.cfi_offset 4, -8
 295              		.cfi_offset 14, -4
 296 0002 82B0     		sub	sp, sp, #8
 297              	.LCFI6:
 298              		.cfi_def_cfa_offset 16
 299 0004 0446     		mov	r4, r0
  75:src/mutex.c   ****     __disable_irq();
 300              		.loc 1 75 5 is_stmt 1 view .LVU74
 301              	.LBB18:
 302              	.LBI18:
 960:driver/Core/cmsis_gcc.h **** {
 303              		.loc 2 960 27 view .LVU75
 304              	.LBB19:
 305              		.loc 2 962 3 view .LVU76
 306              		.syntax unified
 307              	@ 962 "driver/Core/cmsis_gcc.h" 1
 308 0006 72B6     		cpsid i
 309              	@ 0 "" 2
 310              		.thumb
 311              		.syntax unified
 312              	.LBE19:
 313              	.LBE18:
  76:src/mutex.c   **** 
  77:src/mutex.c   ****     TCB_Typedef* current_task = getCurrentTask();       // get current running task
 314              		.loc 1 77 5 view .LVU77
ARM GAS  /tmp/ccmIpolH.s 			page 25


 315              		.loc 1 77 33 is_stmt 0 view .LVU78
 316 0008 FFF7FEFF 		bl	getCurrentTask
 317              	.LVL20:
  78:src/mutex.c   ****     
  79:src/mutex.c   ****     if ((*mutex)->owner != current_task)
 318              		.loc 1 79 5 is_stmt 1 view .LVU79
 319              		.loc 1 79 10 is_stmt 0 view .LVU80
 320 000c 2368     		ldr	r3, [r4]
 321              		.loc 1 79 17 view .LVU81
 322 000e 1A68     		ldr	r2, [r3]
 323              		.loc 1 79 8 view .LVU82
 324 0010 8242     		cmp	r2, r0
 325 0012 02D0     		beq	.L16
  80:src/mutex.c   ****     {
  81:src/mutex.c   ****         __enable_irq();
 326              		.loc 1 81 9 is_stmt 1 view .LVU83
 327              	.LBB20:
 328              	.LBI20:
 949:driver/Core/cmsis_gcc.h **** {
 329              		.loc 2 949 27 view .LVU84
 330              	.LBB21:
 951:driver/Core/cmsis_gcc.h **** }
 331              		.loc 2 951 3 view .LVU85
 332              		.syntax unified
 333              	@ 951 "driver/Core/cmsis_gcc.h" 1
 334 0014 62B6     		cpsie i
 335              	@ 0 "" 2
 336              		.thumb
 337              		.syntax unified
 338              	.LBE21:
 339              	.LBE20:
  82:src/mutex.c   ****         return;         // return if no task aquired the mutex
 340              		.loc 1 82 9 view .LVU86
 341              	.LVL21:
 342              	.L15:
  83:src/mutex.c   ****     }
  84:src/mutex.c   **** 
  85:src/mutex.c   ****     if ((*mutex)->waiting_task->head == NULL)
  86:src/mutex.c   ****     {
  87:src/mutex.c   ****         (*mutex)->lock = 0;
  88:src/mutex.c   ****         (*mutex)->owner->priority = (*mutex)->priority;     // return the old priority of the task
  89:src/mutex.c   ****         (*mutex)->owner = NULL;
  90:src/mutex.c   ****     }
  91:src/mutex.c   ****     else
  92:src/mutex.c   ****     {
  93:src/mutex.c   ****         TCB_Typedef* next_task = popWaitingQueue(&((*mutex)->waiting_task));        // pop next tas
  94:src/mutex.c   ****         
  95:src/mutex.c   ****         if (next_task != NULL)
  96:src/mutex.c   ****         {
  97:src/mutex.c   ****             next_task->state = READY;       // change next task state to ready
  98:src/mutex.c   ****             addToReadyList(&next_task);     // add in ready list
  99:src/mutex.c   **** 
 100:src/mutex.c   ****             (*mutex)->owner->priority = (*mutex)->priority;     // return task previous priority
 101:src/mutex.c   ****             (*mutex)->owner = next_task;            // change the task that aquired mutex lock
 102:src/mutex.c   ****             (*mutex)->priority = next_task->priority;       // copy task priority for priority inhe
 103:src/mutex.c   **** 
 104:src/mutex.c   ****             SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;        // trigger PendSV interrupt for context swi
ARM GAS  /tmp/ccmIpolH.s 			page 26


 105:src/mutex.c   ****         }
 106:src/mutex.c   ****     }
 107:src/mutex.c   ****     __enable_irq();
 108:src/mutex.c   **** }
 343              		.loc 1 108 1 is_stmt 0 view .LVU87
 344 0016 02B0     		add	sp, sp, #8
 345              	.LCFI7:
 346              		.cfi_remember_state
 347              		.cfi_def_cfa_offset 8
 348              		@ sp needed
 349 0018 10BD     		pop	{r4, pc}
 350              	.LVL22:
 351              	.L16:
 352              	.LCFI8:
 353              		.cfi_restore_state
  85:src/mutex.c   ****     {
 354              		.loc 1 85 5 is_stmt 1 view .LVU88
  85:src/mutex.c   ****     {
 355              		.loc 1 85 17 is_stmt 0 view .LVU89
 356 001a 5A68     		ldr	r2, [r3, #4]
  85:src/mutex.c   ****     {
 357              		.loc 1 85 31 view .LVU90
 358 001c 1268     		ldr	r2, [r2]
  85:src/mutex.c   ****     {
 359              		.loc 1 85 8 view .LVU91
 360 001e D2B1     		cbz	r2, .L22
 361              	.LBB22:
  93:src/mutex.c   ****         
 362              		.loc 1 93 9 is_stmt 1 view .LVU92
  93:src/mutex.c   ****         
 363              		.loc 1 93 34 is_stmt 0 view .LVU93
 364 0020 181D     		adds	r0, r3, #4
 365              	.LVL23:
  93:src/mutex.c   ****         
 366              		.loc 1 93 34 view .LVU94
 367 0022 FFF7FEFF 		bl	popWaitingQueue
 368              	.LVL24:
  93:src/mutex.c   ****         
 369              		.loc 1 93 22 view .LVU95
 370 0026 0190     		str	r0, [sp, #4]
  95:src/mutex.c   ****         {
 371              		.loc 1 95 9 is_stmt 1 view .LVU96
  95:src/mutex.c   ****         {
 372              		.loc 1 95 12 is_stmt 0 view .LVU97
 373 0028 E0B1     		cbz	r0, .L19
  97:src/mutex.c   ****             addToReadyList(&next_task);     // add in ready list
 374              		.loc 1 97 13 is_stmt 1 view .LVU98
  97:src/mutex.c   ****             addToReadyList(&next_task);     // add in ready list
 375              		.loc 1 97 30 is_stmt 0 view .LVU99
 376 002a 0123     		movs	r3, #1
 377 002c 8382     		strh	r3, [r0, #20]	@ movhi
  98:src/mutex.c   **** 
 378              		.loc 1 98 13 is_stmt 1 view .LVU100
 379 002e 01A8     		add	r0, sp, #4
 380 0030 FFF7FEFF 		bl	addToReadyList
 381              	.LVL25:
 100:src/mutex.c   ****             (*mutex)->owner = next_task;            // change the task that aquired mutex lock
ARM GAS  /tmp/ccmIpolH.s 			page 27


 382              		.loc 1 100 13 view .LVU101
 100:src/mutex.c   ****             (*mutex)->owner = next_task;            // change the task that aquired mutex lock
 383              		.loc 1 100 42 is_stmt 0 view .LVU102
 384 0034 2368     		ldr	r3, [r4]
 100:src/mutex.c   ****             (*mutex)->owner = next_task;            // change the task that aquired mutex lock
 385              		.loc 1 100 49 view .LVU103
 386 0036 5A7A     		ldrb	r2, [r3, #9]	@ zero_extendqisi2
 100:src/mutex.c   ****             (*mutex)->owner = next_task;            // change the task that aquired mutex lock
 387              		.loc 1 100 21 view .LVU104
 388 0038 1B68     		ldr	r3, [r3]
 100:src/mutex.c   ****             (*mutex)->owner = next_task;            // change the task that aquired mutex lock
 389              		.loc 1 100 39 view .LVU105
 390 003a DA82     		strh	r2, [r3, #22]	@ movhi
 101:src/mutex.c   ****             (*mutex)->priority = next_task->priority;       // copy task priority for priority inhe
 391              		.loc 1 101 13 is_stmt 1 view .LVU106
 101:src/mutex.c   ****             (*mutex)->priority = next_task->priority;       // copy task priority for priority inhe
 392              		.loc 1 101 14 is_stmt 0 view .LVU107
 393 003c 2368     		ldr	r3, [r4]
 101:src/mutex.c   ****             (*mutex)->priority = next_task->priority;       // copy task priority for priority inhe
 394              		.loc 1 101 29 view .LVU108
 395 003e 019A     		ldr	r2, [sp, #4]
 396 0040 1A60     		str	r2, [r3]
 102:src/mutex.c   **** 
 397              		.loc 1 102 13 is_stmt 1 view .LVU109
 102:src/mutex.c   **** 
 398              		.loc 1 102 14 is_stmt 0 view .LVU110
 399 0042 2368     		ldr	r3, [r4]
 102:src/mutex.c   **** 
 400              		.loc 1 102 32 view .LVU111
 401 0044 019A     		ldr	r2, [sp, #4]
 402 0046 927D     		ldrb	r2, [r2, #22]	@ zero_extendqisi2
 403 0048 5A72     		strb	r2, [r3, #9]
 104:src/mutex.c   ****         }
 404              		.loc 1 104 13 is_stmt 1 view .LVU112
 104:src/mutex.c   ****         }
 405              		.loc 1 104 23 is_stmt 0 view .LVU113
 406 004a 074A     		ldr	r2, .L23
 407 004c 5368     		ldr	r3, [r2, #4]
 408 004e 43F08053 		orr	r3, r3, #268435456
 409 0052 5360     		str	r3, [r2, #4]
 410 0054 06E0     		b	.L19
 411              	.LVL26:
 412              	.L22:
 104:src/mutex.c   ****         }
 413              		.loc 1 104 23 view .LVU114
 414              	.LBE22:
  87:src/mutex.c   ****         (*mutex)->owner->priority = (*mutex)->priority;     // return the old priority of the task
 415              		.loc 1 87 9 is_stmt 1 view .LVU115
  87:src/mutex.c   ****         (*mutex)->owner->priority = (*mutex)->priority;     // return the old priority of the task
 416              		.loc 1 87 24 is_stmt 0 view .LVU116
 417 0056 1A72     		strb	r2, [r3, #8]
  88:src/mutex.c   ****         (*mutex)->owner = NULL;
 418              		.loc 1 88 9 is_stmt 1 view .LVU117
  88:src/mutex.c   ****         (*mutex)->owner = NULL;
 419              		.loc 1 88 38 is_stmt 0 view .LVU118
 420 0058 2368     		ldr	r3, [r4]
  88:src/mutex.c   ****         (*mutex)->owner = NULL;
ARM GAS  /tmp/ccmIpolH.s 			page 28


 421              		.loc 1 88 45 view .LVU119
 422 005a 597A     		ldrb	r1, [r3, #9]	@ zero_extendqisi2
  88:src/mutex.c   ****         (*mutex)->owner = NULL;
 423              		.loc 1 88 17 view .LVU120
 424 005c 1B68     		ldr	r3, [r3]
  88:src/mutex.c   ****         (*mutex)->owner = NULL;
 425              		.loc 1 88 35 view .LVU121
 426 005e D982     		strh	r1, [r3, #22]	@ movhi
  89:src/mutex.c   ****     }
 427              		.loc 1 89 9 is_stmt 1 view .LVU122
  89:src/mutex.c   ****     }
 428              		.loc 1 89 10 is_stmt 0 view .LVU123
 429 0060 2368     		ldr	r3, [r4]
  89:src/mutex.c   ****     }
 430              		.loc 1 89 25 view .LVU124
 431 0062 1A60     		str	r2, [r3]
 432              	.LVL27:
 433              	.L19:
 107:src/mutex.c   **** }
 434              		.loc 1 107 5 is_stmt 1 view .LVU125
 435              	.LBB23:
 436              	.LBI23:
 949:driver/Core/cmsis_gcc.h **** {
 437              		.loc 2 949 27 view .LVU126
 438              	.LBB24:
 951:driver/Core/cmsis_gcc.h **** }
 439              		.loc 2 951 3 view .LVU127
 440              		.syntax unified
 441              	@ 951 "driver/Core/cmsis_gcc.h" 1
 442 0064 62B6     		cpsie i
 443              	@ 0 "" 2
 952:driver/Core/cmsis_gcc.h **** 
 444              		.loc 2 952 1 is_stmt 0 view .LVU128
 445              		.thumb
 446              		.syntax unified
 447 0066 D6E7     		b	.L15
 448              	.L24:
 449              		.align	2
 450              	.L23:
 451 0068 00ED00E0 		.word	-536810240
 452              	.LBE24:
 453              	.LBE23:
 454              		.cfi_endproc
 455              	.LFE140:
 457              		.section	.text.createMutex,"ax",%progbits
 458              		.align	1
 459              		.global	createMutex
 460              		.syntax unified
 461              		.thumb
 462              		.thumb_func
 463              		.fpu fpv4-sp-d16
 465              	createMutex:
 466              	.LFB141:
 109:src/mutex.c   **** 
 110:src/mutex.c   **** /**************************************** Function to create mutex ********************************
 111:src/mutex.c   **** Mutex_Typedef* createMutex(void)
 112:src/mutex.c   **** {
ARM GAS  /tmp/ccmIpolH.s 			page 29


 467              		.loc 1 112 1 is_stmt 1 view -0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471 0000 38B5     		push	{r3, r4, r5, lr}
 472              	.LCFI9:
 473              		.cfi_def_cfa_offset 16
 474              		.cfi_offset 3, -16
 475              		.cfi_offset 4, -12
 476              		.cfi_offset 5, -8
 477              		.cfi_offset 14, -4
 113:src/mutex.c   ****     Mutex_Typedef* newMutex = (Mutex_Typedef*)malloc(sizeof(Mutex_Typedef));        // allocate mem
 478              		.loc 1 113 5 view .LVU130
 479              		.loc 1 113 47 is_stmt 0 view .LVU131
 480 0002 0C20     		movs	r0, #12
 481 0004 FFF7FEFF 		bl	malloc
 482              	.LVL28:
 114:src/mutex.c   ****     if (newMutex == NULL)
 483              		.loc 1 114 5 is_stmt 1 view .LVU132
 484              		.loc 1 114 8 is_stmt 0 view .LVU133
 485 0008 0446     		mov	r4, r0
 486 000a 40B1     		cbz	r0, .L25
 115:src/mutex.c   ****     {
 116:src/mutex.c   ****         return NULL;        // return if failed to allocate memory for mutex
 117:src/mutex.c   ****     }
 118:src/mutex.c   **** 
 119:src/mutex.c   ****     memset(newMutex, 0, sizeof(Mutex_Typedef));
 487              		.loc 1 119 5 is_stmt 1 view .LVU134
 488 000c 0025     		movs	r5, #0
 489 000e 0560     		str	r5, [r0]	@ unaligned
 490 0010 4560     		str	r5, [r0, #4]	@ unaligned
 491 0012 8560     		str	r5, [r0, #8]	@ unaligned
 120:src/mutex.c   **** 
 121:src/mutex.c   ****     mutexList* dummy = (mutexList*)malloc(sizeof(mutexList));       // allocate memory for mutex li
 492              		.loc 1 121 5 view .LVU135
 493              		.loc 1 121 36 is_stmt 0 view .LVU136
 494 0014 0420     		movs	r0, #4
 495              	.LVL29:
 496              		.loc 1 121 36 view .LVU137
 497 0016 FFF7FEFF 		bl	malloc
 498              	.LVL30:
 122:src/mutex.c   ****     newMutex->waiting_task = dummy;
 499              		.loc 1 122 5 is_stmt 1 view .LVU138
 500              		.loc 1 122 28 is_stmt 0 view .LVU139
 501 001a 6060     		str	r0, [r4, #4]
 123:src/mutex.c   ****     newMutex->waiting_task->head = NULL;
 502              		.loc 1 123 5 is_stmt 1 view .LVU140
 503              		.loc 1 123 34 is_stmt 0 view .LVU141
 504 001c 0560     		str	r5, [r0]
 124:src/mutex.c   **** 
 125:src/mutex.c   ****     return newMutex;        // return newly created mutex
 505              		.loc 1 125 5 is_stmt 1 view .LVU142
 506              	.LVL31:
 507              	.L25:
 126:src/mutex.c   **** }...
 508              		.loc 1 126 1 is_stmt 0 view .LVU143
 509 001e 2046     		mov	r0, r4
ARM GAS  /tmp/ccmIpolH.s 			page 30


 510 0020 38BD     		pop	{r3, r4, r5, pc}
 511              		.loc 1 126 1 view .LVU144
 512              		.cfi_endproc
 513              	.LFE141:
 515              		.text
 516              	.Letext0:
 517              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 518              		.file 4 "driver/Core/core_cm4.h"
 519              		.file 5 "inc/task.h"
 520              		.file 6 "inc/mutex.h"
 521              		.file 7 "/usr/include/newlib/stdlib.h"
ARM GAS  /tmp/ccmIpolH.s 			page 31


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mutex.c
     /tmp/ccmIpolH.s:18     .text.pushWaitingQueue:0000000000000000 $t
     /tmp/ccmIpolH.s:26     .text.pushWaitingQueue:0000000000000000 pushWaitingQueue
     /tmp/ccmIpolH.s:97     .text.popWaitingQueue:0000000000000000 $t
     /tmp/ccmIpolH.s:104    .text.popWaitingQueue:0000000000000000 popWaitingQueue
     /tmp/ccmIpolH.s:143    .text.MutexTake:0000000000000000 $t
     /tmp/ccmIpolH.s:150    .text.MutexTake:0000000000000000 MutexTake
     /tmp/ccmIpolH.s:269    .text.MutexTake:000000000000004c $d
     /tmp/ccmIpolH.s:276    .text.MutexGive:0000000000000000 $t
     /tmp/ccmIpolH.s:283    .text.MutexGive:0000000000000000 MutexGive
     /tmp/ccmIpolH.s:451    .text.MutexGive:0000000000000068 $d
     /tmp/ccmIpolH.s:458    .text.createMutex:0000000000000000 $t
     /tmp/ccmIpolH.s:465    .text.createMutex:0000000000000000 createMutex

UNDEFINED SYMBOLS
removeFromReadyList
getCurrentTask
addToReadyList
malloc
